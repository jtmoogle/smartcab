
(C:\ProgramData\Anaconda2.4) F:\_githup\submitted\smartcab>f:

(C:\ProgramData\Anaconda2.4) F:\_githup\submitted\smartcab>cd \_githup\submitted\smartcab 

(C:\ProgramData\Anaconda2.4) F:\_githup\submitted\smartcab>python -m smartcab.agent -c 2 
-- main-> run ['-c', '2'] --> opts=[('-c', '2')] args=[]
    --> cmd=2 arg=2
> > > - - - Run cmd=2  start - - - > > > 
 Simulation.init( size=None, update_delay=0.01, display=False, log_metrics=True, optimized=False ) 
 Simulation.run( tolerance= 0.05, n_test=10 ) 

/-------------------------
| Training trial 1
\-------------------------

Environment.reset(): Trial set up with start = (2, 5), destination = (6, 7), deadline = 30

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: forward, reward: -9.19602908754
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 30, 't': 0, 'action': 'forward', 'reward': -9.1960290875386, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving forward through a red light. (rewarded -9.20)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: right, reward: -19.1551857312
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 3, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'right'), 'deadline': 29, 't': 1, 'action': 'right', 'reward': -19.15518573117998, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'notraffic', 'right')
Agent attempted driving right through traffic and cause a minor accident. (rewarded -19.16)
93% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: forward, reward: -9.90345476877
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 28, 't': 2, 'action': 'forward', 'reward': -9.903454768767324, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving forward through a red light. (rewarded -9.90)
90% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: forward, reward: -9.29453799945
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 27, 't': 3, 'action': 'forward', 'reward': -9.294537999447137, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving forward through a red light. (rewarded -9.29)
87% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: None, reward: -5.67750214048
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 26, 't': 4, 'action': None, 'reward': -5.6775021404756485, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -5.68)
83% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: None, reward: -5.08042694631
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 25, 't': 5, 'action': None, 'reward': -5.080426946307895, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -5.08)
80% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right', 'left']
Environment.act() [POST]: location: (2, 4), heading: (0, -1), action: left, reward: 0.252812920428
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 24, 't': 6, 'action': 'left', 'reward': 0.25281292042831105, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove left instead of right. (rewarded 0.25)
77% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 3), heading: (0, -1), action: forward, reward: 0.727200427047
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 23, 't': 7, 'action': 'forward', 'reward': 0.7272004270473326, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 0.73)
73% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 2), heading: (0, -1), action: forward, reward: 0.552120942338
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 22, 't': 8, 'action': 'forward', 'reward': 0.5521209423384977, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 0.55)
70% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 2), heading: (0, -1), action: left, reward: -40.2287189162
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'right', 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'left', 'left'), 'deadline': 21, 't': 9, 'action': 'left', 'reward': -40.22871891623168, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'left', 'left')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -40.23)
67% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 2), heading: (0, -1), action: None, reward: 1.90593311634
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 20, 't': 10, 'action': None, 'reward': 1.9059331163364686, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.91)
63% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: left, reward: 1.93154921386
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 19, 't': 11, 'action': 'left', 'reward': 1.9315492138614474, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 1.93)
60% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'forward', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: None, reward: 2.65366131985
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 18, 't': 12, 'action': None, 'reward': 2.6536613198549226, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 2.65)
57% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: None, reward: 1.39676103263
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 17, 't': 13, 'action': None, 'reward': 1.3967610326263689, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 1.40)
53% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: None, reward: 2.08038944405
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 16, 't': 14, 'action': None, 'reward': 2.0803894440526323, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 2.08)
50% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.72109264516-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: None, reward: 1.4520065619
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 15, 't': 15, 'action': None, 'reward': 1.4520065618985898, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 1.45)
47% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'right', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: left, reward: -19.485031779
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 3, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'forward'), 'deadline': 14, 't': 16, 'action': 'left', 'reward': -19.485031779029548, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'right', 'forward')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -19.49)
43% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: None, reward: -5.77216539304
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 13, 't': 17, 'action': None, 'reward': -5.772165393044754, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.77)
40% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 7), heading: (0, -1), action: right, reward: 1.00432741153
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 12, 't': 18, 'action': 'right', 'reward': 1.0043274115297145, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.00)
37% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 7), heading: (0, -1), action: None, reward: 1.95599569107
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 11, 't': 19, 'action': None, 'reward': 1.9559956910737073, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.96)
33% of time remaining to reach destination.

/-------------------
| Step 20 Results
\-------------------

Environment.step(): t = 20
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (1, 7), heading: (0, -1), action: None, reward: 1.84717206635
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 10, 't': 20, 'action': None, 'reward': 1.8471720663531817, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.85)
30% of time remaining to reach destination.

/-------------------
| Step 21 Results
\-------------------

Environment.step(): t = 21
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: forward, reward: 0.230398111843
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 9, 't': 21, 'action': 'forward', 'reward': 0.23039811184252745, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 0.23)
27% of time remaining to reach destination.

/-------------------
| Step 22 Results
\-------------------

Environment.step(): t = 22
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'forward', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'right', 'forward', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: left, reward: -10.1418530438
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'left', 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'forward', 'left'), 'deadline': 8, 't': 22, 'action': 'left', 'reward': -10.14185304375135, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'forward', 'left')
Agent attempted driving left through a red light. (rewarded -10.14)
23% of time remaining to reach destination.

/-------------------
| Step 23 Results
\-------------------

Environment.step(): t = 23
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'forward', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: forward, reward: -10.8624857025
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 7, 't': 23, 'action': 'forward', 'reward': -10.862485702549806, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent attempted driving forward through a red light. (rewarded -10.86)
20% of time remaining to reach destination.

/-------------------
| Step 24 Results
\-------------------

Environment.step(): t = 24
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: None, reward: 1.96427366296
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 6, 't': 24, 'action': None, 'reward': 1.9642736629576474, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.96)
17% of time remaining to reach destination.

/-------------------
| Step 25 Results
\-------------------

Environment.step(): t = 25
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: forward, reward: -10.9859029266
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 5, 't': 25, 'action': 'forward', 'reward': -10.985902926643345, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent attempted driving forward through a red light. (rewarded -10.99)
13% of time remaining to reach destination.

/-------------------
| Step 26 Results
\-------------------

Environment.step(): t = 26
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'forward', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 6), heading: (1, 0), action: right, reward: 0.452317167958
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 4, 't': 26, 'action': 'right', 'reward': 0.45231716795824206, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.45)
10% of time remaining to reach destination.

/-------------------
| Step 27 Results
\-------------------

Environment.step(): t = 27
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 6), heading: (1, 0), action: None, reward: -4.08705572032
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 3, 't': 27, 'action': None, 'reward': -4.0870557203167825, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -4.09)
7% of time remaining to reach destination.

/-------------------
| Step 28 Results
\-------------------

Environment.step(): t = 28
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=0.0-----candidates_actions=['right', None, 'left']
Environment.act() [POST]: location: (2, 6), heading: (1, 0), action: left, reward: -10.469075647
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 2, 't': 28, 'action': 'left', 'reward': -10.469075647018864, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving left through a red light. (rewarded -10.47)
3% of time remaining to reach destination.

/-------------------
| Step 29 Results
\-------------------

Environment.step(): t = 29
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'left', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 6), heading: (1, 0), action: left, reward: -39.0718229111
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'right', 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'left', 'right'), 'deadline': 1, 't': 29, 'action': 'left', 'reward': -39.071822911112456, 'waypoint': 'right'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('red', 'forward', 'left', 'right')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -39.07)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 2
\-------------------------

Environment.reset(): Trial set up with start = (4, 3), destination = (1, 6), deadline = 30

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: forward, reward: -10.5551609361
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 30, 't': 0, 'action': 'forward', 'reward': -10.55516093606731, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving forward through a red light. (rewarded -10.56)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: None, reward: 1.09122998726
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 29, 't': 1, 'action': None, 'reward': 1.0912299872577615, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.09)
93% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: left, reward: -9.26079319989
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 28, 't': 2, 'action': 'left', 'reward': -9.26079319989064, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving left through a red light. (rewarded -9.26)
90% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: left, reward: -9.97115714031
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 27, 't': 3, 'action': 'left', 'reward': -9.971157140314997, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving left through a red light. (rewarded -9.97)
87% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 2), heading: (0, -1), action: forward, reward: 1.53394011545
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 26, 't': 4, 'action': 'forward', 'reward': 1.5339401154463, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 1.53)
83% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (4, 2), heading: (0, -1), action: None, reward: 1.81026749746
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 25, 't': 5, 'action': None, 'reward': 1.810267497460648, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.81)
80% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'right', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (4, 2), heading: (0, -1), action: None, reward: 2.35887664228
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'left'), 'deadline': 24, 't': 6, 'action': None, 'reward': 2.3588766422840677, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'right', 'left')
Agent properly idled at a red light. (rewarded 2.36)
77% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (4, 2), heading: (0, -1), action: None, reward: 2.36745731167
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 23, 't': 7, 'action': None, 'reward': 2.3674573116687663, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.37)
73% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'right', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: right, reward: 1.8857407122
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'left', 'left'), 'deadline': 22, 't': 8, 'action': 'right', 'reward': 1.8857407121962981, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'left', 'left')
Agent drove right instead of left. (rewarded 1.89)
70% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: left, reward: -10.5358497685
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 21, 't': 9, 'action': 'left', 'reward': -10.53584976854233, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving left through a red light. (rewarded -10.54)
67% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: forward, reward: -9.82045221538
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 20, 't': 10, 'action': 'forward', 'reward': -9.820452215378284, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving forward through a red light. (rewarded -9.82)
63% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: None, reward: -5.65483165242
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 19, 't': 11, 'action': None, 'reward': -5.65483165241795, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.65)
60% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (5, 3), heading: (0, 1), action: right, reward: 0.759867588532
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 18, 't': 12, 'action': 'right', 'reward': 0.759867588532008, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent drove right instead of forward. (rewarded 0.76)
57% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (5, 3), heading: (0, 1), action: None, reward: -4.32789109279
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 17, 't': 13, 'action': None, 'reward': -4.327891092787651, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -4.33)
53% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (4, 3), heading: (-1, 0), action: right, reward: 0.638711824295
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'left'), 'deadline': 16, 't': 14, 'action': 'right', 'reward': 0.6387118242946874, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.64)
50% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'forward')
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: forward, reward: 0.962698928666
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'forward'), 'deadline': 15, 't': 15, 'action': 'forward', 'reward': 0.9626989286659899, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'right', 'forward')
Agent followed the waypoint forward. (rewarded 0.96)
47% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: None, reward: -5.95170320019
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 1, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 14, 't': 16, 'action': None, 'reward': -5.951703200185757, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.95)
43% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: None, reward: 1.95513270684
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'forward'), 'deadline': 13, 't': 17, 'action': None, 'reward': 1.9551327068421351, 'waypoint': 'forward'}
Agent previous state: ('red', 'forward', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.96)
40% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: left, reward: -10.2249415292
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 12, 't': 18, 'action': 'left', 'reward': -10.224941529194918, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving left through a red light. (rewarded -10.22)
37% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: left, reward: -9.56814703545
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 11, 't': 19, 'action': 'left', 'reward': -9.568147035454265, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving left through a red light. (rewarded -9.57)
33% of time remaining to reach destination.

/-------------------
| Step 20 Results
\-------------------

Environment.step(): t = 20
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: left, reward: -10.5748002479
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 10, 't': 20, 'action': 'left', 'reward': -10.574800247900885, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving left through a red light. (rewarded -10.57)
30% of time remaining to reach destination.

/-------------------
| Step 21 Results
\-------------------

Environment.step(): t = 21
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=0.502163705765-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 2), heading: (0, -1), action: right, reward: 0.478416644977
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 9, 't': 21, 'action': 'right', 'reward': 0.47841664497689196, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.48)
27% of time remaining to reach destination.

/-------------------
| Step 22 Results
\-------------------

Environment.step(): t = 22
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: forward, reward: 0.761813492598
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'left'), 'deadline': 8, 't': 22, 'action': 'forward', 'reward': 0.7618134925982869, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 0.76)
23% of time remaining to reach destination.

/-------------------
| Step 23 Results
\-------------------

Environment.step(): t = 23
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: None, reward: -4.10663360878
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 7, 't': 23, 'action': None, 'reward': -4.106633608779326, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -4.11)
20% of time remaining to reach destination.

/-------------------
| Step 24 Results
\-------------------

Environment.step(): t = 24
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: None, reward: -5.86165960893
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 6, 't': 24, 'action': None, 'reward': -5.8616596089326105, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -5.86)
17% of time remaining to reach destination.

/-------------------
| Step 25 Results
\-------------------

Environment.step(): t = 25
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: forward, reward: -40.7644325527
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 4, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 5, 't': 25, 'action': 'forward', 'reward': -40.76443255274427, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -40.76)
13% of time remaining to reach destination.

/-------------------
| Step 26 Results
\-------------------

Environment.step(): t = 26
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: left, reward: -10.5723487062
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'left', 'left'), 'deadline': 4, 't': 26, 'action': 'left', 'reward': -10.572348706176344, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'left', 'left')
Agent attempted driving left through a red light. (rewarded -10.57)
10% of time remaining to reach destination.

/-------------------
| Step 27 Results
\-------------------

Environment.step(): t = 27
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: None, reward: -5.25451079345
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': 'left'}, 'violation': 1, 'light': 'green', 'state': ('green', 'left', 'left', 'left'), 'deadline': 3, 't': 27, 'action': None, 'reward': -5.254510793448107, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'left', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -5.25)
7% of time remaining to reach destination.

/-------------------
| Step 28 Results
\-------------------

Environment.step(): t = 28
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'left')
Environment.act() [POST]: location: (2, 7), heading: (-1, 0), action: left, reward: 0.174761850101
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'left'), 'deadline': 2, 't': 28, 'action': 'left', 'reward': 0.17476185010058276, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 0.17)
3% of time remaining to reach destination.

/-------------------
| Step 29 Results
\-------------------

Environment.step(): t = 29
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 7), heading: (-1, 0), action: None, reward: -5.27013653823
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 1, 'light': 'green', 'state': ('green', 'left', 'left', 'forward'), 'deadline': 1, 't': 29, 'action': None, 'reward': -5.2701365382275105, 'waypoint': 'forward'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'left', 'left', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.27)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 3
\-------------------------

Environment.reset(): Trial set up with start = (2, 2), destination = (7, 3), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'right')
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: left, reward: -39.2962660408
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'left', 'right'), 'deadline': 20, 't': 0, 'action': 'left', 'reward': -39.29626604083305, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'left', 'right')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -39.30)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'left', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: None, reward: 1.6924892955
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 19, 't': 1, 'action': None, 'reward': 1.6924892955036093, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 1.69)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: None, reward: 1.87494990336
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 18, 't': 2, 'action': None, 'reward': 1.874949903357793, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 1.87)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'left', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (3, 2), heading: (1, 0), action: left, reward: 1.30838739474
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 17, 't': 3, 'action': 'left', 'reward': 1.3083873947383453, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded 1.31)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: left, reward: 1.68780663438
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 16, 't': 4, 'action': 'left', 'reward': 1.6878066343837572, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove left instead of right. (rewarded 1.69)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: left, reward: -9.34079006088
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 2, 'light': 'red', 'state': ('red', 'left', 'left', 'left'), 'deadline': 15, 't': 5, 'action': 'left', 'reward': -9.340790060876785, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'left', 'left')
Agent attempted driving left through a red light. (rewarded -9.34)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: right, reward: -19.7606603716
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'forward'}, 'violation': 3, 'light': 'red', 'state': ('red', 'forward', 'left', 'left'), 'deadline': 14, 't': 6, 'action': 'right', 'reward': -19.760660371576353, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'left', 'left')
Agent attempted driving right through traffic and cause a minor accident. (rewarded -19.76)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: None, reward: -5.10216871995
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 13, 't': 7, 'action': None, 'reward': -5.102168719951493, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -5.10)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (2, 7), heading: (-1, 0), action: left, reward: 2.73476478753
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 12, 't': 8, 'action': 'left', 'reward': 2.734764787525028, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.73)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: left, reward: 0.302194076852
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 11, 't': 9, 'action': 'left', 'reward': 0.3021940768522138, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent drove left instead of forward. (rewarded 0.30)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: left, reward: -9.36362545968
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 10, 't': 10, 'action': 'left', 'reward': -9.363625459683819, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving left through a red light. (rewarded -9.36)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'right', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: left, reward: -20.7530272152
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 3, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'right'), 'deadline': 9, 't': 11, 'action': 'left', 'reward': -20.75302721523826, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'right', 'right')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -20.75)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 3), heading: (0, 1), action: forward, reward: 1.43168651845
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 8, 't': 12, 'action': 'forward', 'reward': 1.4316865184488792, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove forward instead of right. (rewarded 1.43)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 4), heading: (0, 1), action: forward, reward: 1.0153115059
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 7, 't': 13, 'action': 'forward', 'reward': 1.0153115058979272, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove forward instead of right. (rewarded 1.02)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=0.907106547299-----candidates_actions=['left']
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: left, reward: 0.419394446874
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 6, 't': 14, 'action': 'left', 'reward': 0.4193944468741909, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove left instead of right. (rewarded 0.42)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=0.982136831479-----candidates_actions=[None]
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: None, reward: 0.920341349159
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 5, 't': 15, 'action': None, 'reward': 0.9203413491585428, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 0.92)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.226158583979-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: right, reward: 0.937404445002
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 4, 't': 16, 'action': 'right', 'reward': 0.9374044450021723, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.94)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: forward, reward: -40.8798213353
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 4, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'right'), 'deadline': 3, 't': 17, 'action': 'forward', 'reward': -40.87982133530848, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'notraffic', 'right')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -40.88)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'right')
------maxQ=0.0-----candidates_actions=['right', None, 'left']
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: None, reward: 0.921270918055
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'right'), 'deadline': 2, 't': 18, 'action': None, 'reward': 0.9212709180554486, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded 0.92)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 5), heading: (-1, 0), action: right, reward: 2.08146478798
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'right'), 'deadline': 1, 't': 19, 'action': 'right', 'reward': 2.0814647879816426, 'waypoint': 'right'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'left', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.08)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 4
\-------------------------

Environment.reset(): Trial set up with start = (1, 3), destination = (6, 6), deadline = 30

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=0.965774606931-----candidates_actions=['left']
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: left, reward: 1.18254353715
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 30, 't': 0, 'action': 'left', 'reward': 1.1825435371466104, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 1.18)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'forward', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: left, reward: -10.8156566056
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'forward', 'left'), 'deadline': 29, 't': 1, 'action': 'left', 'reward': -10.815656605620482, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'forward', 'left')
Agent attempted driving left through a red light. (rewarded -10.82)
93% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: None, reward: 2.85284875923
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 28, 't': 2, 'action': None, 'reward': 2.8528487592335465, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 2.85)
90% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'forward', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: left, reward: -10.1531892975
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'left'}, 'violation': 2, 'light': 'red', 'state': ('red', 'left', 'forward', 'left'), 'deadline': 27, 't': 3, 'action': 'left', 'reward': -10.153189297549815, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'forward', 'left')
Agent attempted driving left through a red light. (rewarded -10.15)
87% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'forward', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: None, reward: 2.05228015678
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'forward', 'left'), 'deadline': 26, 't': 4, 'action': None, 'reward': 2.0522801567801983, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'forward', 'left')
Agent properly idled at a red light. (rewarded 2.05)
83% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (2, 2), heading: (1, 0), action: right, reward: 1.18546872287
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 25, 't': 5, 'action': 'right', 'reward': 1.1854687228745635, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.19)
80% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (2, 2), heading: (1, 0), action: left, reward: -10.291271512
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': 'left'}, 'violation': 2, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'left'), 'deadline': 24, 't': 6, 'action': 'left', 'reward': -10.291271511992239, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'notraffic', 'left')
Agent attempted driving left through a red light. (rewarded -10.29)
77% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'forward', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'forward', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 3), heading: (0, 1), action: right, reward: 1.05525801206
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'forward', 'left'), 'deadline': 23, 't': 7, 'action': 'right', 'reward': 1.0552580120611865, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.06)
73% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'right')
Environment.act() [POST]: location: (2, 3), heading: (0, 1), action: None, reward: -5.31045863664
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'right'), 'deadline': 22, 't': 8, 'action': None, 'reward': -5.310458636640743, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'right', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -5.31)
70% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 3), heading: (0, 1), action: forward, reward: -9.99484479734
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 21, 't': 9, 'action': 'forward', 'reward': -9.994844797338434, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving forward through a red light. (rewarded -9.99)
67% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'right')
------maxQ=0.0-----candidates_actions=['forward', None, 'left']
Environment.act() [POST]: location: (2, 3), heading: (0, 1), action: forward, reward: -39.9397267835
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'right'), 'deadline': 20, 't': 10, 'action': 'forward', 'reward': -39.93972678353255, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'notraffic', 'right')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -39.94)
63% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 3), heading: (0, 1), action: forward, reward: -10.1696222867
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 19, 't': 11, 'action': 'forward', 'reward': -10.169622286727416, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent attempted driving forward through a red light. (rewarded -10.17)
60% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'right')
Environment.act() [POST]: location: (1, 3), heading: (-1, 0), action: right, reward: 2.62948708332
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'right'), 'deadline': 18, 't': 12, 'action': 'right', 'reward': 2.629487083323852, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.63)
57% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'forward', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (8, 3), heading: (-1, 0), action: forward, reward: 1.8431805969
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'forward'), 'deadline': 17, 't': 13, 'action': 'forward', 'reward': 1.8431805968996189, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 1.84)
53% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (8, 3), heading: (-1, 0), action: forward, reward: -10.3843529256
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 16, 't': 14, 'action': 'forward', 'reward': -10.384352925645958, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving forward through a red light. (rewarded -10.38)
50% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=0.0-----candidates_actions=['forward', 'right', 'left']
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: right, reward: 0.110435462865
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 15, 't': 15, 'action': 'right', 'reward': 0.11043546286497052, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.11)
47% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.2519074716-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: None, reward: 2.43390883593
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 14, 't': 16, 'action': None, 'reward': 2.4339088359284435, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.43)
43% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: forward, reward: 1.69561863158
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 13, 't': 17, 'action': 'forward', 'reward': 1.6956186315770228, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent drove forward instead of left. (rewarded 1.70)
40% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: right, reward: 0.844781316693
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 12, 't': 18, 'action': 'right', 'reward': 0.8447813166932598, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent drove right instead of left. (rewarded 0.84)
37% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: None, reward: 2.4409791202
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 11, 't': 19, 'action': None, 'reward': 2.44097912020052, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.44)
33% of time remaining to reach destination.

/-------------------
| Step 20 Results
\-------------------

Environment.step(): t = 20
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: forward, reward: -9.7024725691
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 10, 't': 20, 'action': 'forward', 'reward': -9.70247256909509, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving forward through a red light. (rewarded -9.70)
30% of time remaining to reach destination.

/-------------------
| Step 21 Results
\-------------------

Environment.step(): t = 21
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: left, reward: -20.0904403691
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 3, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 9, 't': 21, 'action': 'left', 'reward': -20.09044036905387, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -20.09)
27% of time remaining to reach destination.

/-------------------
| Step 22 Results
\-------------------

Environment.step(): t = 22
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: None, reward: -5.55318810186
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 8, 't': 22, 'action': None, 'reward': -5.553188101862736, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -5.55)
23% of time remaining to reach destination.

/-------------------
| Step 23 Results
\-------------------

Environment.step(): t = 23
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: None, reward: 0.473536965815
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 7, 't': 23, 'action': None, 'reward': 0.4735369658148465, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 0.47)
20% of time remaining to reach destination.

/-------------------
| Step 24 Results
\-------------------

Environment.step(): t = 24
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: left, reward: -9.45352929362
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 6, 't': 24, 'action': 'left', 'reward': -9.453529293615796, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent attempted driving left through a red light. (rewarded -9.45)
17% of time remaining to reach destination.

/-------------------
| Step 25 Results
\-------------------

Environment.step(): t = 25
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: right, reward: 0.932220964157
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 5, 't': 25, 'action': 'right', 'reward': 0.9322209641568244, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent drove right instead of left. (rewarded 0.93)
13% of time remaining to reach destination.

/-------------------
| Step 26 Results
\-------------------

Environment.step(): t = 26
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'right')
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: None, reward: -4.48394482856
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 1, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'right'), 'deadline': 4, 't': 26, 'action': None, 'reward': -4.483944828558201, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'notraffic', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -4.48)
10% of time remaining to reach destination.

/-------------------
| Step 27 Results
\-------------------

Environment.step(): t = 27
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'right')
------maxQ=1.04073239399-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 2), heading: (-1, 0), action: right, reward: 0.238974574405
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'right'), 'deadline': 3, 't': 27, 'action': 'right', 'reward': 0.23897457440459058, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 0.24)
7% of time remaining to reach destination.

/-------------------
| Step 28 Results
\-------------------

Environment.step(): t = 28
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: right, reward: 0.717850137515
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 2, 't': 28, 'action': 'right', 'reward': 0.7178501375147536, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.72)
3% of time remaining to reach destination.

/-------------------
| Step 29 Results
\-------------------

Environment.step(): t = 29
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'left')
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: right, reward: -0.274859656749
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'left'), 'deadline': 1, 't': 29, 'action': 'right', 'reward': -0.2748596567492627, 'waypoint': 'left'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'left', 'left', 'left')
Agent drove right instead of left. (rewarded -0.27)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 5
\-------------------------

Environment.reset(): Trial set up with start = (3, 2), destination = (8, 7), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: right, reward: 1.55254590799
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 1.5525459079914767, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.55)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: forward, reward: -10.9850925728
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 19, 't': 1, 'action': 'forward', 'reward': -10.985092572818468, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent attempted driving forward through a red light. (rewarded -10.99)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: forward, reward: -9.32583091848
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 18, 't': 2, 'action': 'forward', 'reward': -9.3258309184824, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent attempted driving forward through a red light. (rewarded -9.33)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.90204392478-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: None, reward: 2.03249204106
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 17, 't': 3, 'action': None, 'reward': 2.0324920410582212, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 2.03)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (4, 3), heading: (0, 1), action: right, reward: 0.784866109065
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 16, 't': 4, 'action': 'right', 'reward': 0.7848661090647294, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.78)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (5, 3), heading: (1, 0), action: left, reward: 1.64391259461
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 15, 't': 5, 'action': 'left', 'reward': 1.6439125946100612, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove left instead of right. (rewarded 1.64)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'forward', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (6, 3), heading: (1, 0), action: forward, reward: 2.02489539869
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'forward'), 'deadline': 14, 't': 6, 'action': 'forward', 'reward': 2.0248953986898144, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 2.02)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'forward')
Environment.act() [POST]: location: (6, 3), heading: (1, 0), action: None, reward: -5.13906594974
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'forward'), 'deadline': 13, 't': 7, 'action': None, 'reward': -5.139065949740816, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'right', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.14)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (7, 3), heading: (1, 0), action: forward, reward: 1.46666302157
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 12, 't': 8, 'action': 'forward', 'reward': 1.4666630215747574, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.47)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.0-----candidates_actions=['right', None]
Environment.act() [POST]: location: (7, 4), heading: (0, 1), action: right, reward: 0.765706418119
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 0.7657064181194999, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.77)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'left')
------maxQ=0.0-----candidates_actions=['forward', 'right', None]
Environment.act() [POST]: location: (6, 4), heading: (-1, 0), action: right, reward: 1.44359220664
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'left'), 'deadline': 10, 't': 10, 'action': 'right', 'reward': 1.4435922066385674, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 1.44)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (6, 3), heading: (0, -1), action: right, reward: 2.53844568595
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 9, 't': 11, 'action': 'right', 'reward': 2.538445685946334, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.54)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.15358154585-----candidates_actions=['left']
Environment.act() [POST]: location: (5, 3), heading: (-1, 0), action: left, reward: 1.57564739706
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 8, 't': 12, 'action': 'left', 'reward': 1.575647397061303, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove left instead of right. (rewarded 1.58)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (5, 3), heading: (-1, 0), action: None, reward: -4.71396395133
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 7, 't': 13, 'action': None, 'reward': -4.713963951332673, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -4.71)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (5, 4), heading: (0, 1), action: left, reward: 0.678117359778
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'right'), 'deadline': 6, 't': 14, 'action': 'left', 'reward': 0.6781173597777238, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'notraffic', 'right')
Agent drove left instead of right. (rewarded 0.68)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (4, 4), heading: (-1, 0), action: right, reward: 0.146443634479
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 5, 't': 15, 'action': 'right', 'reward': 0.14644363447852027, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent drove right instead of left. (rewarded 0.15)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'forward')
------maxQ=0.92159029845-----candidates_actions=['forward']
Environment.act() [POST]: location: (3, 4), heading: (-1, 0), action: forward, reward: 0.731548738681
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'forward'), 'deadline': 4, 't': 16, 'action': 'forward', 'reward': 0.7315487386808242, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 0.73)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'right', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (3, 4), heading: (-1, 0), action: None, reward: 1.32533804096
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'notraffic', 'forward'), 'deadline': 3, 't': 17, 'action': None, 'reward': 1.3253380409599254, 'waypoint': 'forward'}
Agent previous state: ('red', 'right', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.33)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 3), heading: (0, -1), action: right, reward: 0.274500821124
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 2, 't': 18, 'action': 'right', 'reward': 0.27450082112414553, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.27)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 2), heading: (0, -1), action: forward, reward: 0.998472555994
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'left'), 'deadline': 1, 't': 19, 'action': 'forward', 'reward': 0.9984725559936515, 'waypoint': 'left'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'left', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 1.00)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 6
\-------------------------

Environment.reset(): Trial set up with start = (8, 2), destination = (3, 4), deadline = 25

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: forward, reward: -10.7604908914
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 25, 't': 0, 'action': 'forward', 'reward': -10.760490891378499, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent attempted driving forward through a red light. (rewarded -10.76)
96% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right', None]
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: right, reward: -19.1757252231
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': 'forward'}, 'violation': 3, 'light': 'red', 'state': ('red', 'forward', 'left', 'right'), 'deadline': 24, 't': 1, 'action': 'right', 'reward': -19.175725223072156, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'left', 'right')
Agent attempted driving right through traffic and cause a minor accident. (rewarded -19.18)
92% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=1.36059727555-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: None, reward: 1.71393872412
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 23, 't': 2, 'action': None, 'reward': 1.713938724119609, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 1.71)
88% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: None, reward: -4.34173389939
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 22, 't': 3, 'action': None, 'reward': -4.341733899393047, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -4.34)
84% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (1, 2), heading: (1, 0), action: right, reward: 1.43370632846
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 21, 't': 4, 'action': 'right', 'reward': 1.4337063284608476, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.43)
80% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (1, 7), heading: (0, -1), action: left, reward: 0.617690639552
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 20, 't': 5, 'action': 'left', 'reward': 0.6176906395520435, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent drove left instead of forward. (rewarded 0.62)
76% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 7), heading: (1, 0), action: right, reward: 2.04334154587
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 19, 't': 6, 'action': 'right', 'reward': 2.0433415458709385, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.04)
72% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: left, reward: 0.511427895513
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 18, 't': 7, 'action': 'left', 'reward': 0.5114278955128555, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove left instead of forward. (rewarded 0.51)
68% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: None, reward: -4.95322585456
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 1, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'right'), 'deadline': 17, 't': 8, 'action': None, 'reward': -4.953225854557381, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'notraffic', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -4.95)
64% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'right', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'right', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (3, 6), heading: (1, 0), action: right, reward: 2.18972185948
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'right', 'right'), 'deadline': 16, 't': 9, 'action': 'right', 'reward': 2.1897218594769825, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'right', 'right')
Agent followed the waypoint right. (rewarded 2.19)
60% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, 1), action: right, reward: 1.36336926799
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 15, 't': 10, 'action': 'right', 'reward': 1.3633692679879337, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 1.36)
56% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=0.379933794266-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 7), heading: (-1, 0), action: right, reward: 0.269504191797
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 14, 't': 11, 'action': 'right', 'reward': 0.26950419179691976, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent drove right instead of forward. (rewarded 0.27)
52% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'right', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 7), heading: (-1, 0), action: None, reward: 2.22548325148
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'notraffic', 'left'), 'deadline': 13, 't': 12, 'action': None, 'reward': 2.2254832514829124, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.23)
48% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: right, reward: 0.432657424942
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 12, 't': 13, 'action': 'right', 'reward': 0.4326574249415758, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.43)
44% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.38009735505-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 6), heading: (1, 0), action: right, reward: 1.92745969021
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 11, 't': 14, 'action': 'right', 'reward': 1.9274596902096521, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.93)
40% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 6), heading: (1, 0), action: forward, reward: -10.6454767069
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'notraffic', 'left'), 'deadline': 10, 't': 15, 'action': 'forward', 'reward': -10.645476706906571, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'notraffic', 'left')
Agent attempted driving forward through a red light. (rewarded -10.65)
36% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'right', 'notraffic', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'right', 'notraffic', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (3, 5), heading: (0, -1), action: left, reward: 0.962716920334
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'right'}, 'violation': 0, 'light': 'green', 'state': ('green', 'right', 'notraffic', 'left'), 'deadline': 9, 't': 16, 'action': 'left', 'reward': 0.9627169203340946, 'waypoint': 'left'}
Agent previous state: ('green', 'right', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 0.96)
32% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: right, reward: -0.295376849814
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 8, 't': 17, 'action': 'right', 'reward': -0.29537684981399703, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded -0.30)
28% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: left, reward: -9.36225528417
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 7, 't': 18, 'action': 'left', 'reward': -9.362255284165348, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving left through a red light. (rewarded -9.36)
24% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: forward, reward: -9.97899916483
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 6, 't': 19, 'action': 'forward', 'reward': -9.978999164831402, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving forward through a red light. (rewarded -9.98)
20% of time remaining to reach destination.

/-------------------
| Step 20 Results
\-------------------

Environment.step(): t = 20
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: None, reward: 2.11890951857
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 5, 't': 20, 'action': None, 'reward': 2.1189095185692404, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.12)
16% of time remaining to reach destination.

/-------------------
| Step 21 Results
\-------------------

Environment.step(): t = 21
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (5, 5), heading: (1, 0), action: forward, reward: 1.25584313273
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 4, 't': 21, 'action': 'forward', 'reward': 1.2558431327258481, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 1.26)
12% of time remaining to reach destination.

/-------------------
| Step 22 Results
\-------------------

Environment.step(): t = 22
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (5, 5), heading: (1, 0), action: None, reward: -4.41746722238
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 3, 't': 22, 'action': None, 'reward': -4.417467222376032, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -4.42)
8% of time remaining to reach destination.

/-------------------
| Step 23 Results
\-------------------

Environment.step(): t = 23
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
Environment.act() [POST]: location: (5, 6), heading: (0, 1), action: right, reward: -0.402901984933
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 2, 't': 23, 'action': 'right', 'reward': -0.4029019849332751, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent drove right instead of left. (rewarded -0.40)
4% of time remaining to reach destination.

/-------------------
| Step 24 Results
\-------------------

Environment.step(): t = 24
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (5, 7), heading: (0, 1), action: forward, reward: 0.0436921839368
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 1, 't': 24, 'action': 'forward', 'reward': 0.0436921839368376, 'waypoint': 'right'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove forward instead of right. (rewarded 0.04)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 7
\-------------------------

Environment.reset(): Trial set up with start = (5, 4), destination = (3, 6), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'forward', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (4, 4), heading: (-1, 0), action: right, reward: 2.56972078377
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'right'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 2.569720783770235, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.57)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'forward')
------maxQ=0.481349464333-----candidates_actions=['forward']
Environment.act() [POST]: location: (3, 4), heading: (-1, 0), action: forward, reward: 1.1407209117
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'forward'), 'deadline': 19, 't': 1, 'action': 'forward', 'reward': 1.1407209116962869, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'right', 'forward')
Agent followed the waypoint forward. (rewarded 1.14)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 3), heading: (0, -1), action: right, reward: 0.684522061762
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 18, 't': 2, 'action': 'right', 'reward': 0.6845220617616478, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.68)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=0.490290175371-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 3), heading: (1, 0), action: right, reward: 1.62452962083
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 17, 't': 3, 'action': 'right', 'reward': 1.6245296208272375, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.62)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
------maxQ=1.67305643447-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 3), heading: (1, 0), action: None, reward: 1.64659372557
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.6465937255729877, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.65)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 4), heading: (0, 1), action: right, reward: 0.119070574553
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 15, 't': 5, 'action': 'right', 'reward': 0.11907057455318126, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.12)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (4, 5), heading: (0, 1), action: forward, reward: 1.24290071977
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 14, 't': 6, 'action': 'forward', 'reward': 1.2429007197737092, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove forward instead of right. (rewarded 1.24)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'right')
Environment.act() [POST]: location: (3, 5), heading: (-1, 0), action: right, reward: 1.55183000799
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'right'), 'deadline': 13, 't': 7, 'action': 'right', 'reward': 1.5518300079865965, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.55)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (3, 5), heading: (-1, 0), action: forward, reward: -9.16044002483
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 12, 't': 8, 'action': 'forward', 'reward': -9.160440024832381, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent attempted driving forward through a red light. (rewarded -9.16)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.581781514491-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 4), heading: (0, -1), action: right, reward: 0.608216688204
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 0.608216688203673, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.61)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.65377852263-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 4), heading: (1, 0), action: right, reward: 1.91854234464
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 10, 't': 10, 'action': 'right', 'reward': 1.918542344644808, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.92)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
------maxQ=0.654193697369-----candidates_actions=['left']
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: left, reward: 0.32059327483
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 9, 't': 11, 'action': 'left', 'reward': 0.3205932748297655, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded 0.32)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: left, reward: 1.83849058017
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'left'), 'deadline': 8, 't': 12, 'action': 'left', 'reward': 1.8384905801699152, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.84)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'right')
------maxQ=1.28486039189-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 2), heading: (0, -1), action: right, reward: 2.28472557989
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'right'), 'deadline': 7, 't': 13, 'action': 'right', 'reward': 2.2847255798903365, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.28)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 2), heading: (0, -1), action: None, reward: -5.70150282708
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 6, 't': 14, 'action': None, 'reward': -5.701502827084236, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.70)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: right, reward: 0.0286855991391
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 5, 't': 15, 'action': 'right', 'reward': 0.028685599139130602, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.03)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: forward, reward: 0.110372319549
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 4, 't': 16, 'action': 'forward', 'reward': 0.11037231954881399, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded 0.11)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'left')
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: forward, reward: -10.4920216974
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'left', 'left'), 'deadline': 3, 't': 17, 'action': 'forward', 'reward': -10.492021697417663, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'left', 'left')
Agent attempted driving forward through a red light. (rewarded -10.49)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=1.66021193492-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: None, reward: 1.94830237319
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 2, 't': 18, 'action': None, 'reward': 1.9483023731938787, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.95)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'left', 'left')
------maxQ=0.0-----candidates_actions=['forward', 'right', None]
Environment.act() [POST]: location: (5, 3), heading: (0, 1), action: right, reward: 0.993681878957
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'left', 'left'), 'deadline': 1, 't': 19, 'action': 'right', 'reward': 0.9936818789566552, 'waypoint': 'left'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('red', 'left', 'left', 'left')
Agent drove right instead of left. (rewarded 0.99)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 8
\-------------------------

Environment.reset(): Trial set up with start = (1, 6), destination = (4, 7), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.63856603918-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (0, 1), action: None, reward: 2.9790462644
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 20, 't': 0, 'action': None, 'reward': 2.9790462644000204, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.98)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=1.80425715406-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (0, 1), action: None, reward: 2.32337880116
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 19, 't': 1, 'action': None, 'reward': 2.3233788011550773, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.32)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'left')
Environment.act() [POST]: location: (1, 6), heading: (0, 1), action: left, reward: -39.7974267412
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'left', 'left'), 'deadline': 18, 't': 2, 'action': 'left', 'reward': -39.797426741180594, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'left', 'left')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -39.80)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: right, reward: 0.0107939432585
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 17, 't': 3, 'action': 'right', 'reward': 0.010793943258450844, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent drove right instead of left. (rewarded 0.01)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'right', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'right', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: left, reward: -19.6641611473
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': 'forward'}, 'violation': 3, 'light': 'green', 'state': ('green', 'forward', 'right', 'left'), 'deadline': 16, 't': 4, 'action': 'left', 'reward': -19.664161147318016, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'right', 'left')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -19.66)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: left, reward: -39.1903690461
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 15, 't': 5, 'action': 'left', 'reward': -39.190369046131465, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -39.19)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: None, reward: 1.04857645671
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 14, 't': 6, 'action': None, 'reward': 1.0485764567118434, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.05)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
------maxQ=1.65982508002-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: None, reward: 2.85508496726
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 13, 't': 7, 'action': None, 'reward': 2.855084967261198, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.86)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'left')
------maxQ=1.17943832114-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: None, reward: 1.33027130242
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'left'), 'deadline': 12, 't': 8, 'action': None, 'reward': 1.3302713024246127, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'right', 'left')
Agent properly idled at a red light. (rewarded 1.33)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.36738239376-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 7), heading: (0, 1), action: left, reward: 2.31699527704
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 11, 't': 9, 'action': 'left', 'reward': 2.316995277044856, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.32)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'left')
Environment.act() [POST]: location: (8, 7), heading: (0, 1), action: None, reward: 1.67616847779
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'left', 'left'), 'deadline': 10, 't': 10, 'action': None, 'reward': 1.6761684777858148, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.68)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
Environment.act() [POST]: location: (8, 2), heading: (0, 1), action: forward, reward: 1.28493204094
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 9, 't': 11, 'action': 'forward', 'reward': 1.2849320409361178, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent drove forward instead of left. (rewarded 1.28)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: right, reward: 0.172405062468
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 8, 't': 12, 'action': 'right', 'reward': 0.17240506246808196, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.17)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: None, reward: 0.890881143843
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 7, 't': 13, 'action': None, 'reward': 0.8908811438427275, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 0.89)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=0.445440571921-----candidates_actions=[None]
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: None, reward: 2.08450162815
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 6, 't': 14, 'action': None, 'reward': 2.084501628148259, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 2.08)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: left, reward: -10.2999380903
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 5, 't': 15, 'action': 'left', 'reward': -10.299938090304927, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent attempted driving left through a red light. (rewarded -10.30)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: forward, reward: -10.8758917528
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 4, 't': 16, 'action': 'forward', 'reward': -10.87589175278128, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent attempted driving forward through a red light. (rewarded -10.88)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'right', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'right', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (7, 7), heading: (0, -1), action: right, reward: 0.298377290028
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': 'right'}, 'violation': 0, 'light': 'green', 'state': ('green', 'right', 'left', 'forward'), 'deadline': 3, 't': 17, 'action': 'right', 'reward': 0.29837729002784086, 'waypoint': 'forward'}
Agent previous state: ('green', 'right', 'left', 'forward')
Agent drove right instead of forward. (rewarded 0.30)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
Environment.act() [POST]: location: (7, 6), heading: (0, -1), action: forward, reward: -0.448581963341
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 2, 't': 18, 'action': 'forward', 'reward': -0.4485819633410446, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent drove forward instead of left. (rewarded -0.45)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.8421888354-----candidates_actions=['left']
Environment.act() [POST]: location: (6, 6), heading: (-1, 0), action: left, reward: 0.195601786253
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 1, 't': 19, 'action': 'left', 'reward': 0.19560178625320335, 'waypoint': 'left'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 0.20)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 9
\-------------------------

Environment.reset(): Trial set up with start = (3, 2), destination = (8, 7), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'right')
Environment.act() [POST]: location: (2, 2), heading: (-1, 0), action: right, reward: 2.95999779897
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'right'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 2.9599977989735153, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.96)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=0.733331510787-----candidates_actions=['forward']
Environment.act() [POST]: location: (1, 2), heading: (-1, 0), action: forward, reward: 2.62173817604
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 19, 't': 1, 'action': 'forward', 'reward': 2.6217381760421863, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.62)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.67753484341-----candidates_actions=['forward']
Environment.act() [POST]: location: (8, 2), heading: (-1, 0), action: forward, reward: 2.58508635366
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 18, 't': 2, 'action': 'forward', 'reward': 2.5850863536590163, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.59)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'right')
------maxQ=0.0-----candidates_actions=[None, 'left']
Environment.act() [POST]: location: (8, 2), heading: (-1, 0), action: None, reward: 0.865224611331
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'right'), 'deadline': 17, 't': 3, 'action': None, 'reward': 0.8652246113306211, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded 0.87)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: right, reward: 2.63163095123
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 16, 't': 4, 'action': 'right', 'reward': 2.6316309512321556, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.63)
75% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 10
\-------------------------

Environment.reset(): Trial set up with start = (1, 2), destination = (5, 3), deadline = 25

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'right', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'right', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: left, reward: -40.7185240785
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': None, 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'right', 'left'), 'deadline': 25, 't': 0, 'action': 'left', 'reward': -40.71852407846973, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'right', 'left')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -40.72)
96% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'right', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: forward, reward: -39.7950540822
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': None, 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'right', 'left'), 'deadline': 24, 't': 1, 'action': 'forward', 'reward': -39.79505408218858, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'right', 'left')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -39.80)
92% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.96726798292-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: None, reward: 1.01471636501
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 23, 't': 2, 'action': None, 'reward': 1.0147163650126843, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.01)
88% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.49099217396-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: None, reward: 2.95194113662
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 22, 't': 3, 'action': None, 'reward': 2.9519411366220107, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 2.95)
84% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'left')
------maxQ=0.0-----candidates_actions=['forward', 'right', None]
Environment.act() [POST]: location: (2, 2), heading: (1, 0), action: right, reward: 0.249415269085
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'forward', 'left'), 'deadline': 21, 't': 4, 'action': 'right', 'reward': 0.24941526908509004, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.25)
80% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=2.13131059854-----candidates_actions=['forward']
Environment.act() [POST]: location: (3, 2), heading: (1, 0), action: forward, reward: 2.72352214482
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 20, 't': 5, 'action': 'forward', 'reward': 2.7235221448154334, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.72)
76% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 2), heading: (1, 0), action: left, reward: -9.97757805116
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 19, 't': 6, 'action': 'left', 'reward': -9.977578051161391, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving left through a red light. (rewarded -9.98)
72% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: left, reward: 0.218099185958
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 18, 't': 7, 'action': 'left', 'reward': 0.21809918595806033, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent drove left instead of forward. (rewarded 0.22)
68% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right']
Environment.act() [POST]: location: (4, 7), heading: (1, 0), action: right, reward: 2.53194268973
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'right'), 'deadline': 17, 't': 8, 'action': 'right', 'reward': 2.531942689731462, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'right', 'right')
Agent followed the waypoint right. (rewarded 2.53)
64% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (4, 2), heading: (0, 1), action: right, reward: 0.222601324846
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 16, 't': 9, 'action': 'right', 'reward': 0.22260132484587714, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.22)
60% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.67869130425-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 2), heading: (0, 1), action: None, reward: 2.48911762674
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 15, 't': 10, 'action': None, 'reward': 2.4891176267428086, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.49)
56% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 2), heading: (0, 1), action: forward, reward: -39.8776654873
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 4, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 14, 't': 11, 'action': 'forward', 'reward': -39.877665487339954, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -39.88)
52% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=2.0839044655-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 2), heading: (0, 1), action: None, reward: 2.69757779284
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 13, 't': 12, 'action': None, 'reward': 2.6975777928386755, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.70)
48% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=0.241535534648-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 2), heading: (-1, 0), action: right, reward: -0.250034550543
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 12, 't': 13, 'action': 'right', 'reward': -0.2500345505425592, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent drove right instead of left. (rewarded -0.25)
44% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=2.39074112917-----candidates_actions=[None]
Environment.act() [POST]: location: (3, 2), heading: (-1, 0), action: None, reward: 1.01452540501
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 11, 't': 14, 'action': None, 'reward': 1.014525405005369, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.01)
40% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: right, reward: 0.40104894405
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 10, 't': 15, 'action': 'right', 'reward': 0.4010489440498928, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.40)
36% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'right')
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: None, reward: -5.28744187685
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'right'), 'deadline': 9, 't': 16, 'action': None, 'reward': -5.28744187684736, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'right', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -5.29)
32% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.9504268971-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 7), heading: (1, 0), action: right, reward: 1.48094278565
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 8, 't': 17, 'action': 'right', 'reward': 1.4809427856460733, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.48)
28% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (4, 7), heading: (1, 0), action: forward, reward: -9.95618568537
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 2, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'forward'), 'deadline': 7, 't': 18, 'action': 'forward', 'reward': -9.956185685371196, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'notraffic', 'forward')
Agent attempted driving forward through a red light. (rewarded -9.96)
24% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (4, 7), heading: (1, 0), action: forward, reward: -9.25271883414
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 6, 't': 19, 'action': 'forward', 'reward': -9.252718834141763, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving forward through a red light. (rewarded -9.25)
20% of time remaining to reach destination.

/-------------------
| Step 20 Results
\-------------------

Environment.step(): t = 20
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'forward', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (4, 7), heading: (1, 0), action: None, reward: 1.43159211543
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'left', 'forward'), 'deadline': 5, 't': 20, 'action': None, 'reward': 1.4315921154297122, 'waypoint': 'forward'}
Agent previous state: ('red', 'forward', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.43)
16% of time remaining to reach destination.

/-------------------
| Step 21 Results
\-------------------

Environment.step(): t = 21
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=0.324718993031-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 2), heading: (0, 1), action: right, reward: 1.09737725173
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 4, 't': 21, 'action': 'right', 'reward': 1.0973772517340112, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent drove right instead of forward. (rewarded 1.10)
12% of time remaining to reach destination.

/-------------------
| Step 22 Results
\-------------------

Environment.step(): t = 22
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: left, reward: 0.865730103578
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 3, 't': 22, 'action': 'left', 'reward': 0.8657301035775302, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 0.87)
8% of time remaining to reach destination.

/-------------------
| Step 23 Results
\-------------------

Environment.step(): t = 23
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
------maxQ=0.487393486099-----candidates_actions=['left']
Environment.act() [POST]: location: (5, 7), heading: (0, -1), action: left, reward: -0.258560791945
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 2, 't': 23, 'action': 'left', 'reward': -0.2585607919447699, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded -0.26)
4% of time remaining to reach destination.

/-------------------
| Step 24 Results
\-------------------

Environment.step(): t = 24
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.71568484137-----candidates_actions=['right']
Environment.act() [POST]: location: (6, 7), heading: (1, 0), action: right, reward: 1.14053575476
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 1, 't': 24, 'action': 'right', 'reward': 1.1405357547640724, 'waypoint': 'right'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.14)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 11
\-------------------------

Environment.reset(): Trial set up with start = (1, 7), destination = (7, 4), deadline = 25

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.122634582867-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: right, reward: 0.520633029102
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 25, 't': 0, 'action': 'right', 'reward': 0.5206330291022667, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.52)
96% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (1, 6), heading: (0, -1), action: None, reward: -4.93480128102
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 24, 't': 1, 'action': None, 'reward': -4.9348012810237565, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -4.93)
92% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: left, reward: 1.23612167966
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 23, 't': 2, 'action': 'left', 'reward': 1.236121679658648, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.24)
88% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.26497110003-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: None, reward: 1.92224069504
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 22, 't': 3, 'action': None, 'reward': 1.92224069504105, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.92)
84% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.59360589754-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: None, reward: 2.44134415436
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 21, 't': 4, 'action': None, 'reward': 2.441344154357072, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 2.44)
80% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'forward')
Environment.act() [POST]: location: (8, 5), heading: (0, -1), action: right, reward: 0.848319357368
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'forward'), 'deadline': 20, 't': 5, 'action': 'right', 'reward': 0.8483193573678255, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'left', 'forward')
Agent drove right instead of forward. (rewarded 0.85)
76% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'left')
Environment.act() [POST]: location: (7, 5), heading: (-1, 0), action: left, reward: 2.56193942594
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'left'), 'deadline': 19, 't': 6, 'action': 'left', 'reward': 2.5619394259387147, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.56)
72% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'right')
------maxQ=1.26597134487-----candidates_actions=['right']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (7, 4), heading: (0, -1), action: right, reward: 2.21600020743
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'right'), 'deadline': 18, 't': 7, 'action': 'right', 'reward': 2.2160002074278355, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'right', 'right')
Agent followed the waypoint right. (rewarded 2.22)
68% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 12
\-------------------------

Environment.reset(): Trial set up with start = (1, 6), destination = (6, 7), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'forward', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'forward', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: -4.91196354861
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'forward', 'left': 'left'}, 'violation': 1, 'light': 'green', 'state': ('green', 'left', 'forward', 'right'), 'deadline': 20, 't': 0, 'action': None, 'reward': -4.911963548611294, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'forward', 'right')
Agent idled at a green light with no oncoming traffic. (rewarded -4.91)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'left', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (2, 6), heading: (1, 0), action: forward, reward: 1.09931579566
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'right'), 'deadline': 19, 't': 1, 'action': 'forward', 'reward': 1.0993157956629505, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'left', 'right')
Agent drove forward instead of right. (rewarded 1.10)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'right')
------maxQ=0.775915003993-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 7), heading: (0, 1), action: right, reward: 2.85926466517
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'right'), 'deadline': 18, 't': 2, 'action': 'right', 'reward': 2.8592646651732396, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.86)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.78616043364-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 7), heading: (-1, 0), action: right, reward: 1.61420589407
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 17, 't': 3, 'action': 'right', 'reward': 1.614205894067147, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.61)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'forward')
------maxQ=0.0-----candidates_actions=['right', None, 'left']
Environment.act() [POST]: location: (1, 7), heading: (-1, 0), action: None, reward: 1.61875978376
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'forward'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.6187597837576335, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.62)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'left', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: forward, reward: 2.44757267977
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 15, 't': 5, 'action': 'forward', 'reward': 2.4475726797713246, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.45)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
Environment.act() [POST]: location: (7, 7), heading: (-1, 0), action: forward, reward: 2.57422861442
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 14, 't': 6, 'action': 'forward', 'reward': 2.574228614415751, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 2.57)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=2.42741637168-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (6, 7), heading: (-1, 0), action: forward, reward: 1.12968180679
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 13, 't': 7, 'action': 'forward', 'reward': 1.129681806789876, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.13)
60% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 13
\-------------------------

Environment.reset(): Trial set up with start = (5, 4), destination = (2, 5), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'right', 'notraffic', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'right', 'notraffic', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (4, 4), heading: (-1, 0), action: right, reward: 2.14279194792
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'green', 'state': ('green', 'right', 'notraffic', 'right'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 2.1427919479184716, 'waypoint': 'right'}
Agent previous state: ('green', 'right', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.14)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: right, reward: 0.966080842605
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 19, 't': 1, 'action': 'right', 'reward': 0.9660808426046842, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.97)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
Environment.act() [POST]: location: (4, 3), heading: (0, -1), action: None, reward: -5.20760514134
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 1, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 18, 't': 2, 'action': None, 'reward': -5.207605141343528, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent idled at a green light with no oncoming traffic. (rewarded -5.21)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=0.0-----candidates_actions=['left']
Environment.act() [POST]: location: (3, 3), heading: (-1, 0), action: left, reward: 2.87879724076
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 17, 't': 3, 'action': 'left', 'reward': 2.8787972407566835, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.88)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=1.0574098981-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 2), heading: (0, -1), action: right, reward: 1.28561259885
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 16, 't': 4, 'action': 'right', 'reward': 1.2856125988492706, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.29)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.08921719343-----candidates_actions=['left']
Environment.act() [POST]: location: (2, 2), heading: (-1, 0), action: left, reward: 2.86179574344
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 15, 't': 5, 'action': 'left', 'reward': 2.861795743438462, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.86)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.70018316385-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 7), heading: (0, -1), action: right, reward: 1.75985179216
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 14, 't': 6, 'action': 'right', 'reward': 1.759851792162133, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.76)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.77854908923-----candidates_actions=['forward']
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: forward, reward: 1.06150045653
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 13, 't': 7, 'action': 'forward', 'reward': 1.0615004565269819, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.06)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.58654960353-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: None, reward: 1.94934486799
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 12, 't': 8, 'action': None, 'reward': 1.949344867985225, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 1.95)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.76794723576-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: None, reward: 1.11789027637
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 11, 't': 9, 'action': None, 'reward': 1.1178902763743486, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 1.12)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'forward')
Environment.act() [POST]: location: (2, 6), heading: (0, -1), action: left, reward: -19.4381352065
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 3, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'forward'), 'deadline': 10, 't': 10, 'action': 'left', 'reward': -19.438135206452554, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'forward', 'forward')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -19.44)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (2, 5), heading: (0, -1), action: forward, reward: 2.65880949942
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 9, 't': 11, 'action': 'forward', 'reward': 2.6588094994213525, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.66)
40% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 14
\-------------------------

Environment.reset(): Trial set up with start = (8, 7), destination = (4, 5), deadline = 30

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'forward', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: right, reward: 2.77685651916
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'right'), 'deadline': 30, 't': 0, 'action': 'right', 'reward': 2.7768565191613286, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.78)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (8, 5), heading: (0, -1), action: forward, reward: 1.60198381234
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 29, 't': 1, 'action': 'forward', 'reward': 1.6019838123361998, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent drove forward instead of right. (rewarded 1.60)
93% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'forward', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (8, 5), heading: (0, -1), action: left, reward: -9.23477054283
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'left'}, 'violation': 2, 'light': 'red', 'state': ('red', 'left', 'forward', 'right'), 'deadline': 28, 't': 2, 'action': 'left', 'reward': -9.234770542834076, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'forward', 'right')
Agent attempted driving left through a red light. (rewarded -9.23)
90% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right', None]
Environment.act() [POST]: location: (8, 5), heading: (0, -1), action: forward, reward: -40.015239765
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'forward', 'left': 'left'}, 'violation': 4, 'light': 'red', 'state': ('red', 'left', 'forward', 'right'), 'deadline': 27, 't': 3, 'action': 'forward', 'reward': -40.01523976499016, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'forward', 'right')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -40.02)
87% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'forward', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (8, 5), heading: (0, -1), action: forward, reward: -9.68173348789
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'right'), 'deadline': 26, 't': 4, 'action': 'forward', 'reward': -9.681733487889442, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'forward', 'right')
Agent attempted driving forward through a red light. (rewarded -9.68)
83% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'right')
Environment.act() [POST]: location: (1, 5), heading: (1, 0), action: right, reward: 1.02311904944
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'right'), 'deadline': 25, 't': 5, 'action': 'right', 'reward': 1.023119049444133, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 1.02)
80% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
Environment.act() [POST]: location: (1, 5), heading: (1, 0), action: None, reward: -5.69121604519
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 24, 't': 6, 'action': None, 'reward': -5.691216045193007, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -5.69)
77% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.28711430721-----candidates_actions=['forward']
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: forward, reward: 1.7132435285
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 23, 't': 7, 'action': 'forward', 'reward': 1.7132435285042766, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 1.71)
73% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (2, 4), heading: (0, -1), action: left, reward: 0.950722750523
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 22, 't': 8, 'action': 'left', 'reward': 0.9507227505227708, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent drove left instead of forward. (rewarded 0.95)
70% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'right')
------maxQ=0.511559524722-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: right, reward: 2.62008267014
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'right'), 'deadline': 21, 't': 9, 'action': 'right', 'reward': 2.620082670142002, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.62)
67% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'forward')
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: left, reward: -40.0813857269
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 4, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'forward'), 'deadline': 20, 't': 10, 'action': 'left', 'reward': -40.081385726909666, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'notraffic', 'forward')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -40.08)
63% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.321633805985-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: right, reward: 0.687350095482
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 19, 't': 11, 'action': 'right', 'reward': 0.6873500954816801, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.69)
60% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'left')
------maxQ=0.124707634543-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 5), heading: (-1, 0), action: right, reward: 0.127466557967
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'forward', 'left'), 'deadline': 18, 't': 12, 'action': 'right', 'reward': 0.12746655796656514, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.13)
57% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'right')
Environment.act() [POST]: location: (2, 5), heading: (-1, 0), action: left, reward: -19.1786955759
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 3, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'right'), 'deadline': 17, 't': 13, 'action': 'left', 'reward': -19.178695575944932, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'forward', 'right')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -19.18)
53% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.73001747801-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 4), heading: (0, -1), action: right, reward: 2.00152106111
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 16, 't': 14, 'action': 'right', 'reward': 2.0015210611115903, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.00)
50% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'right')
------maxQ=1.31474354166-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: right, reward: 1.96686665793
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'right'), 'deadline': 15, 't': 15, 'action': 'right', 'reward': 1.9668666579336653, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.97)
47% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'forward')
------maxQ=0.809379891879-----candidates_actions=[None]
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: None, reward: 1.01434512144
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'forward'), 'deadline': 14, 't': 16, 'action': None, 'reward': 1.0143451214355508, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.01)
43% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.504491950733-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: right, reward: 0.740253059739
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 13, 't': 17, 'action': 'right', 'reward': 0.7402530597387622, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.74)
40% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.97550646843-----candidates_actions=['left']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: left, reward: 1.32848547106
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 12, 't': 18, 'action': 'left', 'reward': 1.3284854710596752, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.33)
37% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 15
\-------------------------

Environment.reset(): Trial set up with start = (6, 7), destination = (1, 6), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (6, 7), heading: (-1, 0), action: None, reward: 1.81486580775
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 20, 't': 0, 'action': None, 'reward': 1.8148658077512982, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded 1.81)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'right')
------maxQ=0.432612305665-----candidates_actions=[None]
Environment.act() [POST]: location: (6, 7), heading: (-1, 0), action: None, reward: 0.424548741532
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'right'), 'deadline': 19, 't': 1, 'action': None, 'reward': 0.4245487415324741, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded 0.42)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (6, 7), heading: (-1, 0), action: None, reward: 1.62461214354
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 18, 't': 2, 'action': None, 'reward': 1.624612143544609, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded 1.62)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.86576926956-----candidates_actions=['right']
Environment.act() [POST]: location: (6, 6), heading: (0, -1), action: right, reward: 1.74872693057
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 17, 't': 3, 'action': 'right', 'reward': 1.7487269305688697, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.75)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.80724810006-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 6), heading: (1, 0), action: right, reward: 2.64574307671
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 16, 't': 4, 'action': 'right', 'reward': 2.645743076707856, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.65)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.622372505236-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 7), heading: (0, 1), action: right, reward: 1.25438033497
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 15, 't': 5, 'action': 'right', 'reward': 1.2543803349682419, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.25)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.70263326709-----candidates_actions=[None]
Environment.act() [POST]: location: (7, 7), heading: (0, 1), action: None, reward: 1.76406925019
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 14, 't': 6, 'action': None, 'reward': 1.7640692501905297, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.76)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=1.43939862038-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: left, reward: 0.943189632696
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 13, 't': 7, 'action': 'left', 'reward': 0.9431896326963023, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 0.94)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=2.03941713615-----candidates_actions=['forward']
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: forward, reward: 1.21098246892
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 12, 't': 8, 'action': 'forward', 'reward': 1.2109824689218511, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.21)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'left', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: right, reward: 0.469756413786
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'left', 'left'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 0.46975641378606947, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'left', 'left')
Agent drove right instead of left. (rewarded 0.47)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: None, reward: 0.959902553889
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 10, 't': 10, 'action': None, 'reward': 0.9599025538885081, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded 0.96)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.22649558839-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 2), heading: (-1, 0), action: right, reward: 2.60306927344
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 9, 't': 11, 'action': 'right', 'reward': 2.6030692734426712, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.60)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.42811029807-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: right, reward: 1.20813845235
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 8, 't': 12, 'action': 'right', 'reward': 1.2081384523497967, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.21)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'right', 'forward', 'right')
-- CreateQ self learning, not has key --> self.Q[('green', 'right', 'forward', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: left, reward: -19.4590690386
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': 'right'}, 'violation': 3, 'light': 'green', 'state': ('green', 'right', 'forward', 'right'), 'deadline': 7, 't': 13, 'action': 'left', 'reward': -19.459069038562752, 'waypoint': 'right'}
Agent previous state: ('green', 'right', 'forward', 'right')
Agent attempted driving left through traffic and cause a minor accident. (rewarded -19.46)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.41478243091-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 7), heading: (1, 0), action: right, reward: 1.49430059748
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 6, 't': 14, 'action': 'right', 'reward': 1.4943005974758148, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.49)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: right, reward: -0.312082738049
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 5, 't': 15, 'action': 'right', 'reward': -0.3120827380491977, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded -0.31)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'right')
------maxQ=0.428580523599-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: None, reward: -0.519896988695
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'right'), 'deadline': 4, 't': 16, 'action': None, 'reward': -0.5198969886949956, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'notraffic', 'right')
Agent properly idled at a red light. (rewarded -0.52)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'right')
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: left, reward: -39.7493136447
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 4, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'right'), 'deadline': 3, 't': 17, 'action': 'left', 'reward': -39.74931364473331, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'notraffic', 'right')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -39.75)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=1.53726799984-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: None, reward: 1.09003648958
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 2, 't': 18, 'action': None, 'reward': 1.0900364895768853, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 1.09)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=1.31365224471-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (0, 1), action: None, reward: -0.448596700689
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 1, 't': 19, 'action': None, 'reward': -0.44859670068883173, 'waypoint': 'right'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded -0.45)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 16
\-------------------------

Environment.reset(): Trial set up with start = (2, 2), destination = (7, 6), deadline = 25

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'left')
Environment.act() [POST]: location: (3, 2), heading: (1, 0), action: right, reward: 0.872588235398
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'left'), 'deadline': 25, 't': 0, 'action': 'right', 'reward': 0.8725882353981504, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'left', 'left')
Agent drove right instead of left. (rewarded 0.87)
96% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.65199596975-----candidates_actions=['left']
Environment.act() [POST]: location: (3, 7), heading: (0, -1), action: left, reward: 1.64604321616
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 24, 't': 1, 'action': 'left', 'reward': 1.646043216158593, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.65)
92% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'left')
------maxQ=1.28096971297-----candidates_actions=['left']
Environment.act() [POST]: location: (2, 7), heading: (-1, 0), action: left, reward: 2.73949319696
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'left'), 'deadline': 23, 't': 2, 'action': 'left', 'reward': 2.7394931969596863, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.74)
88% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: left, reward: 1.30071741565
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 22, 't': 3, 'action': 'left', 'reward': 1.3007174156472934, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent drove left instead of forward. (rewarded 1.30)
84% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'right')
------maxQ=0.0-----candidates_actions=['left']
Environment.act() [POST]: location: (2, 2), heading: (0, 1), action: left, reward: -39.6040053933
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 4, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'right'), 'deadline': 21, 't': 4, 'action': 'left', 'reward': -39.6040053932868, 'waypoint': 'right'}
Agent previous state: ('red', 'forward', 'notraffic', 'right')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -39.60)
80% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
------maxQ=0.114416347077-----candidates_actions=['left']
Environment.act() [POST]: location: (3, 2), heading: (1, 0), action: left, reward: -0.0380761687021
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 20, 't': 5, 'action': 'left', 'reward': -0.038076168702061985, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded -0.04)
76% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'notraffic', 'right', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: forward, reward: 1.61896800972
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'left'), 'deadline': 19, 't': 6, 'action': 'forward', 'reward': 1.6189680097183587, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'right', 'left')
Agent drove forward instead of left. (rewarded 1.62)
72% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'left', 'forward')
------maxQ=0.715796057715-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: None, reward: 1.82338730289
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'left', 'forward'), 'deadline': 18, 't': 7, 'action': None, 'reward': 1.8233873028925673, 'waypoint': 'forward'}
Agent previous state: ('red', 'forward', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.82)
68% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=2.01747502595-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 2), heading: (1, 0), action: None, reward: 2.31959274534
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 17, 't': 8, 'action': None, 'reward': 2.3195927453375775, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 2.32)
64% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.50017891786-----candidates_actions=['forward']
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: forward, reward: 1.40493432732
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 16, 't': 9, 'action': 'forward', 'reward': 1.404934327316603, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 1.40)
60% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=2.16853388564-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: None, reward: 1.96076979266
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 15, 't': 10, 'action': None, 'reward': 1.960769792655649, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.96)
56% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.45255662259-----candidates_actions=['forward']
Environment.act() [POST]: location: (6, 2), heading: (1, 0), action: forward, reward: 1.81974913448
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 14, 't': 11, 'action': 'forward', 'reward': 1.8197491344810004, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 1.82)
52% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (6, 3), heading: (0, 1), action: right, reward: -0.209065878291
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 13, 't': 12, 'action': 'right', 'reward': -0.20906587829090317, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded -0.21)
48% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.64901959295-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 3), heading: (1, 0), action: left, reward: 1.08177968304
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 12, 't': 13, 'action': 'left', 'reward': 1.0817796830444044, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.08)
44% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'right', 'left')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'right', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (7, 4), heading: (0, 1), action: right, reward: 0.216654547502
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'right', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'right', 'left'), 'deadline': 11, 't': 14, 'action': 'right', 'reward': 0.2166545475016476, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'right', 'left')
Agent drove right instead of left. (rewarded 0.22)
40% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=2.06465183915-----candidates_actions=[None]
Environment.act() [POST]: location: (7, 4), heading: (0, 1), action: None, reward: 0.923720159253
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 10, 't': 15, 'action': None, 'reward': 0.9237201592532913, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 0.92)
36% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.63615287853-----candidates_actions=['forward']
Environment.act() [POST]: location: (7, 5), heading: (0, 1), action: forward, reward: 1.5002673166
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 9, 't': 16, 'action': 'forward', 'reward': 1.500267316602173, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 1.50)
32% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.62519980254-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (7, 6), heading: (0, 1), action: forward, reward: 1.40925965476
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 8, 't': 17, 'action': 'forward', 'reward': 1.4092596547552525, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.41)
28% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 17
\-------------------------

Environment.reset(): Trial set up with start = (8, 7), destination = (5, 6), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.73335125864-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: None, reward: 2.72284876559
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 20, 't': 0, 'action': None, 'reward': 2.7228487655917504, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.72)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=2.22810001212-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: None, reward: 2.33053231897
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 19, 't': 1, 'action': None, 'reward': 2.330532318965856, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.33)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=2.27931616554-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: None, reward: 2.3957074834
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 18, 't': 2, 'action': None, 'reward': 2.395707483400323, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.40)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=2.33751182447-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: None, reward: 1.72248172213
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 17, 't': 3, 'action': None, 'reward': 1.7224817221333988, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.72)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=2.0299967733-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: None, reward: 1.07574843934
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.0757484393432992, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.08)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.55287260632-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: None, reward: 1.91886277301
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 15, 't': 5, 'action': None, 'reward': 1.91886277300533, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.92)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.365399638-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: left, reward: 1.55254701849
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 14, 't': 6, 'action': 'left', 'reward': 1.55254701848799, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.55)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'left')
------maxQ=1.25485481178-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 2.19865997587
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'left'), 'deadline': 13, 't': 7, 'action': None, 'reward': 2.198659975866243, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'right', 'left')
Agent properly idled at a red light. (rewarded 2.20)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.73586768966-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 1.2795533332
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 12, 't': 8, 'action': None, 'reward': 1.2795533332003308, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.28)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.141458181649-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: right, reward: 1.59568328305
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 1.5956832830453975, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.60)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'right')
------maxQ=1.56582109743-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 7), heading: (0, 1), action: right, reward: 0.956154740815
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'right'), 'deadline': 10, 't': 10, 'action': 'right', 'reward': 0.9561547408150324, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 0.96)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'right')
------maxQ=1.78479298589-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: right, reward: 1.82259368583
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'right'), 'deadline': 9, 't': 11, 'action': 'right', 'reward': 1.8225936858315046, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 1.82)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.938376420102-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: right, reward: -0.174515066395
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 8, 't': 12, 'action': 'right', 'reward': -0.17451506639490644, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded -0.17)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'left')
------maxQ=1.72675739382-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 2.22998079597
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'left'), 'deadline': 7, 't': 13, 'action': None, 'reward': 2.229980795967073, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'right', 'left')
Agent properly idled at a red light. (rewarded 2.23)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=2.22146665529-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 1.14023338616
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 6, 't': 14, 'action': None, 'reward': 1.140233386160864, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.14)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.68085002073-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 1.83121067913
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 5, 't': 15, 'action': None, 'reward': 1.831210679131688, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.83)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'forward', 'left')
------maxQ=1.02614007839-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 1.53862347871
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'forward', 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'forward', 'left'), 'deadline': 4, 't': 16, 'action': None, 'reward': 1.538623478706494, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.54)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'forward', 'left')
------maxQ=0.527629006031-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: right, reward: 0.961312379689
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'forward', 'left'), 'deadline': 3, 't': 17, 'action': 'right', 'reward': 0.9613123796892499, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.96)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=0.432527772009-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: 0.0497837790216
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 2, 't': 18, 'action': None, 'reward': 0.049783779021560504, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 0.05)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'left', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'left', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: 1.10768596997
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'left', 'right'), 'deadline': 1, 't': 19, 'action': None, 'reward': 1.107685969971687, 'waypoint': 'right'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('red', 'left', 'left', 'right')
Agent properly idled at a red light. (rewarded 1.11)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Training trial 18
\-------------------------

Environment.reset(): Trial set up with start = (2, 4), destination = (6, 7), deadline = 35

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'right', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (2, 4), heading: (-1, 0), action: left, reward: -40.7223797957
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 4, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'forward'), 'deadline': 35, 't': 0, 'action': 'left', 'reward': -40.72237979569722, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'right', 'forward')
Agent attempted driving left through a red light with traffic and cause a major accident. (rewarded -40.72)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.381930676854-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 3), heading: (0, -1), action: right, reward: 0.560144551238
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 34, 't': 1, 'action': 'right', 'reward': 0.5601445512380641, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.56)
94% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.75603034993-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 3), heading: (0, -1), action: None, reward: 1.6510326332
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 33, 't': 2, 'action': None, 'reward': 1.651032633196382, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.65)
91% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06381797761-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 3), heading: (0, -1), action: None, reward: 1.64273471137
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 32, 't': 3, 'action': None, 'reward': 1.6427347113664734, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.64)
89% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=1.85327634449-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 3), heading: (0, -1), action: None, reward: 1.53562951827
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 31, 't': 4, 'action': None, 'reward': 1.5356295182670885, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.54)
86% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.07415907204-----candidates_actions=['left']
Environment.act() [POST]: location: (1, 3), heading: (-1, 0), action: left, reward: 1.70392701499
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 30, 't': 5, 'action': 'left', 'reward': 1.7039270149940435, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 1.70)
83% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (1, 3), heading: (-1, 0), action: forward, reward: -39.7080637622
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 4, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 29, 't': 6, 'action': 'forward', 'reward': -39.708063762169175, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving forward through a red light with traffic and cause a major accident. (rewarded -39.71)
80% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'forward')
------maxQ=0.977566353421-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 3), heading: (-1, 0), action: None, reward: 1.07267483566
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'forward'), 'deadline': 28, 't': 7, 'action': None, 'reward': 1.0726748356600835, 'waypoint': 'forward'}
Agent previous state: ('red', 'forward', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.07)
77% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'left', 'forward', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: right, reward: 0.228628685793
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'forward', 'forward'), 'deadline': 27, 't': 8, 'action': 'right', 'reward': 0.22862868579311535, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'forward', 'forward')
Agent drove right instead of forward. (rewarded 0.23)
74% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.45897332824-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 2), heading: (-1, 0), action: left, reward: 1.00582821834
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 26, 't': 9, 'action': 'left', 'reward': 1.0058282183383078, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.01)
71% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.51722972865-----candidates_actions=['forward']
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: forward, reward: 2.39302250915
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 25, 't': 10, 'action': 'forward', 'reward': 2.3930225091485644, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.39)
69% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.471037614046-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 7), heading: (0, -1), action: right, reward: 1.18264877209
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 24, 't': 11, 'action': 'right', 'reward': 1.182648772093958, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.18)
66% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.868570732347-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: right, reward: 0.71862383342
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 23, 't': 12, 'action': 'right', 'reward': 0.7186238334200851, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.72)
63% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
Environment.act() [POST]: location: (8, 2), heading: (0, 1), action: right, reward: 1.74469507459
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 22, 't': 13, 'action': 'right', 'reward': 1.744695074588571, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.74)
60% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=0.241155775515-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 2), heading: (0, 1), action: None, reward: 0.695659984408
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 21, 't': 14, 'action': None, 'reward': 0.6956599844079471, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 0.70)
57% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
------maxQ=0.0381700891876-----candidates_actions=['left']
Environment.act() [POST]: location: (1, 2), heading: (1, 0), action: left, reward: 1.08217663437
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 20, 't': 15, 'action': 'left', 'reward': 1.0821766343714545, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded 1.08)
54% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'left')
------maxQ=0.942870356098-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 3), heading: (0, 1), action: right, reward: 0.876187752442
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'forward', 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'left', 'left'), 'deadline': 19, 't': 16, 'action': 'right', 'reward': 0.8761877524418774, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'left', 'left')
Agent drove right instead of left. (rewarded 0.88)
51% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.84961829439-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 3), heading: (-1, 0), action: right, reward: 2.085631192
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 18, 't': 17, 'action': 'right', 'reward': 2.0856311919969333, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.09)
49% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (8, 3), heading: (-1, 0), action: None, reward: -4.82436324196
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 1, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 17, 't': 18, 'action': None, 'reward': -4.824363241964947, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent idled at a green light with no oncoming traffic. (rewarded -4.82)
46% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.82684319307-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 2), heading: (0, -1), action: right, reward: 0.108572928902
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 16, 't': 19, 'action': 'right', 'reward': 0.10857292890184211, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.11)
43% of time remaining to reach destination.

/-------------------
| Step 20 Results
\-------------------

Environment.step(): t = 20
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=1.19129412654-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: left, reward: 2.04720678728
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 15, 't': 20, 'action': 'left', 'reward': 2.047206787284175, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.05)
40% of time remaining to reach destination.

/-------------------
| Step 21 Results
\-------------------

Environment.step(): t = 21
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.9551261189-----candidates_actions=['forward']
Environment.act() [POST]: location: (6, 2), heading: (-1, 0), action: forward, reward: 1.30040636183
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 14, 't': 21, 'action': 'forward', 'reward': 1.3004063618317017, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.30)
37% of time remaining to reach destination.

/-------------------
| Step 22 Results
\-------------------

Environment.step(): t = 22
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'right')
------maxQ=1.38842825958-----candidates_actions=['right']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (6, 7), heading: (0, -1), action: right, reward: 0.887588960026
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'right'), 'deadline': 13, 't': 22, 'action': 'right', 'reward': 0.8875889600261957, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'forward', 'right')
Agent followed the waypoint right. (rewarded 0.89)
34% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 19
\-------------------------

Environment.reset(): Trial set up with start = (3, 6), destination = (8, 3), deadline = 30

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.467708060986-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 5), heading: (0, -1), action: right, reward: 0.683733364147
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 30, 't': 0, 'action': 'right', 'reward': 0.6837333641469061, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.68)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.38904304352-----candidates_actions=['left']
Environment.act() [POST]: location: (2, 5), heading: (-1, 0), action: left, reward: 2.57443298461
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 29, 't': 1, 'action': 'left', 'reward': 2.5744329846143588, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.57)
93% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.62776624036-----candidates_actions=['forward']
Environment.act() [POST]: location: (1, 5), heading: (-1, 0), action: forward, reward: 2.33286193127
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 28, 't': 2, 'action': 'forward', 'reward': 2.332861931266277, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.33)
90% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
Environment.act() [POST]: location: (1, 5), heading: (-1, 0), action: left, reward: -10.88655404
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 2, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 27, 't': 3, 'action': 'left', 'reward': -10.886554040025485, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent attempted driving left through a red light. (rewarded -10.89)
87% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.575720712566-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 4), heading: (0, -1), action: right, reward: 1.84659545803
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 26, 't': 4, 'action': 'right', 'reward': 1.8465954580273483, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.85)
83% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'left')
------maxQ=0.96293575261-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 4), heading: (-1, 0), action: left, reward: 1.84919130597
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'left'), 'deadline': 25, 't': 5, 'action': 'left', 'reward': 1.8491913059681984, 'waypoint': 'left'}
Agent previous state: ('green', 'left', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.85)
80% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'right')
------maxQ=0.549657897831-----candidates_actions=['forward']
Environment.act() [POST]: location: (7, 4), heading: (-1, 0), action: forward, reward: 1.57749046235
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'right'), 'deadline': 24, 't': 6, 'action': 'forward', 'reward': 1.577490462348874, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'left', 'right')
Agent drove forward instead of right. (rewarded 1.58)
77% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.31812437521-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 3), heading: (0, -1), action: right, reward: 1.23916533164
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 23, 't': 7, 'action': 'right', 'reward': 1.2391653316432532, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.24)
73% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.27864485343-----candidates_actions=['right']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (8, 3), heading: (1, 0), action: right, reward: 1.04806984934
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 22, 't': 8, 'action': 'right', 'reward': 1.04806984933749, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.05)
70% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Training trial 20
\-------------------------

Environment.reset(): Trial set up with start = (1, 7), destination = (3, 3), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'forward', 'left')
------maxQ=0.126087096255-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: right, reward: 0.407380613217
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'forward', 'left'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 0.4073806132165234, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.41)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'right', 'left')
------maxQ=0.0-----candidates_actions=['right', None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 1.41692973962
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'right', 'left'), 'deadline': 19, 't': 1, 'action': None, 'reward': 1.4169297396151708, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'right', 'left')
Agent properly idled at a red light. (rewarded 1.42)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'notraffic', 'left')
------maxQ=1.11274162574-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 1.55227744622
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'notraffic', 'left'), 'deadline': 18, 't': 2, 'action': None, 'reward': 1.5522774462151336, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.55)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.70353149156-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 1.97062788931
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 17, 't': 3, 'action': None, 'reward': 1.970627889309357, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.97)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=1.69445293138-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 1.22877553526
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.2287755352637069, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.23)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=1.46161423332-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 2.80698387547
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 15, 't': 5, 'action': None, 'reward': 2.8069838754700953, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.81)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'left', 'left')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'left', 'left')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: right, reward: 0.615209012196
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'left', 'left'), 'deadline': 14, 't': 6, 'action': 'right', 'reward': 0.6152090121956202, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'left', 'left')
Agent drove right instead of left. (rewarded 0.62)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=1.96762474319-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: right, reward: 2.19284994665
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 13, 't': 7, 'action': 'right', 'reward': 2.192849946648322, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.19)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'forward')
------maxQ=1.02512059454-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: 1.77924830611
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'forward'), 'deadline': 12, 't': 8, 'action': None, 'reward': 1.7792483061058926, 'waypoint': 'forward'}
Agent previous state: ('red', 'forward', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.78)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=1.2111580853-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 7), heading: (0, 1), action: right, reward: 0.630816394978
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 0.6308163949779446, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.63)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.50771051143-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 7), heading: (0, 1), action: None, reward: 1.91277030318
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 10, 't': 10, 'action': None, 'reward': 1.9127703031848713, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.91)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.793597282884-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: right, reward: 0.774380142125
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 9, 't': 11, 'action': 'right', 'reward': 0.774380142124669, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 0.77)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.1342990544-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 1.31376844922
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 8, 't': 12, 'action': None, 'reward': 1.3137684492221635, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.31)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=1.72403375181-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 2.31067631723
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 7, 't': 13, 'action': None, 'reward': 2.3106763172337264, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.31)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.01735503452-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (-1, 0), action: None, reward: 2.1206634403
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 6, 't': 14, 'action': None, 'reward': 2.1206634403049716, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.12)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'left', 'left')
------maxQ=0.483298676632-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: right, reward: -0.29277725179
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'left', 'left'), 'deadline': 5, 't': 15, 'action': 'right', 'reward': -0.2927772517896563, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'left', 'left')
Agent drove right instead of left. (rewarded -0.29)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.08023734492-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: right, reward: 2.29814326276
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 4, 't': 16, 'action': 'right', 'reward': 2.2981432627564113, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.30)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.4941859992-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: 1.02032504601
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 3, 't': 17, 'action': None, 'reward': 1.0203250460079856, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.02)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.2572555226-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: 1.16345375051
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 2, 't': 18, 'action': None, 'reward': 1.163453750510772, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.16)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.21035463656-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (1, 0), action: None, reward: 1.5515467495
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 1, 't': 19, 'action': None, 'reward': 1.5515467495021678, 'waypoint': 'forward'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.55)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Testing trial 1
\-------------------------

Environment.reset(): Trial set up with start = (7, 2), destination = (1, 6), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'forward')
------maxQ=0.424159678684-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 3), heading: (0, 1), action: right, reward: 0.258565237309
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'forward'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 0.25856523730886916, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'left', 'forward')
Agent drove right instead of forward. (rewarded 0.26)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 3), heading: (1, 0), action: left, reward: 2.7027608688
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 19, 't': 1, 'action': 'left', 'reward': 2.702760868803664, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.70)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=1.17151124847-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 4), heading: (0, 1), action: right, reward: 0.856253173445
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 18, 't': 2, 'action': 'right', 'reward': 0.856253173445288, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.86)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act() [POST]: location: (1, 4), heading: (1, 0), action: left, reward: 1.92986821026
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 17, 't': 3, 'action': 'left', 'reward': 1.9298682102630285, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.93)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'right')
------maxQ=1.26098791912-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 5), heading: (0, 1), action: right, reward: 1.36549265314
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'right'), 'deadline': 16, 't': 4, 'action': 'right', 'reward': 1.3654926531384668, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 1.37)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
------maxQ=1.22378633989-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (1, 6), heading: (0, 1), action: forward, reward: 2.67254140979
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 15, 't': 5, 'action': 'forward', 'reward': 2.6725414097860702, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.67)
70% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 2
\-------------------------

Environment.reset(): Trial set up with start = (6, 4), destination = (3, 5), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (6, 3), heading: (0, -1), action: right, reward: 1.81652114439
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 1.8165211443870657, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.82)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'left', 'left')
------maxQ=0.0952607124213-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 3), heading: (1, 0), action: right, reward: 0.996877683354
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'left', 'left'), 'deadline': 19, 't': 1, 'action': 'right', 'reward': 0.9968776833539489, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'left', 'left')
Agent drove right instead of left. (rewarded 1.00)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
------maxQ=1.22378633989-----candidates_actions=['forward']
Environment.act() [POST]: location: (8, 3), heading: (1, 0), action: forward, reward: 2.11762897349
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 18, 't': 2, 'action': 'forward', 'reward': 2.1176289734877813, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.12)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'forward')
------maxQ=0.911862506657-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 3), heading: (1, 0), action: None, reward: 1.05182127823
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'forward'), 'deadline': 17, 't': 3, 'action': None, 'reward': 1.0518212782252054, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.05)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 4), heading: (0, 1), action: right, reward: 0.597773524425
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 16, 't': 4, 'action': 'right', 'reward': 0.5977735244247143, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.60)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 4), heading: (0, 1), action: None, reward: 1.48404270724
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 15, 't': 5, 'action': None, 'reward': 1.4840427072392628, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.48)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act() [POST]: location: (1, 4), heading: (1, 0), action: left, reward: 2.66946866733
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 14, 't': 6, 'action': 'left', 'reward': 2.669468667325223, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.67)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'forward')
------maxQ=0.911862506657-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 4), heading: (1, 0), action: None, reward: 2.3446317601
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'forward'), 'deadline': 13, 't': 7, 'action': None, 'reward': 2.34463176010369, 'waypoint': 'forward'}
Agent previous state: ('red', 'left', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 2.34)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 5), heading: (0, 1), action: right, reward: 0.236408002443
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 12, 't': 8, 'action': 'right', 'reward': 0.23640800244273785, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.24)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (2, 5), heading: (1, 0), action: left, reward: 0.819227885684
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 11, 't': 9, 'action': 'left', 'reward': 0.8192278856839417, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 0.82)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.56821009757-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (3, 5), heading: (1, 0), action: forward, reward: 0.889260518826
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 10, 't': 10, 'action': 'forward', 'reward': 0.889260518825544, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 0.89)
45% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 3
\-------------------------

Environment.reset(): Trial set up with start = (8, 2), destination = (4, 2), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'forward')
------maxQ=0.0-----candidates_actions=['forward', 'right', None]
Environment.act() [POST]: location: (8, 2), heading: (1, 0), action: None, reward: 1.03839557139
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'forward'), 'deadline': 20, 't': 0, 'action': None, 'reward': 1.0383955713914672, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'right', 'forward')
Agent properly idled at a red light. (rewarded 1.04)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.44291875607-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 2), heading: (1, 0), action: None, reward: 2.58039009645
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 19, 't': 1, 'action': None, 'reward': 2.580390096450886, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 2.58)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.44291875607-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 2), heading: (1, 0), action: None, reward: 2.36742402363
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 18, 't': 2, 'action': None, 'reward': 2.3674240236264033, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 2.37)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'forward')
------maxQ=0.826569518565-----candidates_actions=['forward']
Environment.act() [POST]: location: (1, 2), heading: (1, 0), action: forward, reward: 2.04342677533
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'forward'), 'deadline': 17, 't': 3, 'action': 'forward', 'reward': 2.043426775327304, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 2.04)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.38095069303-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 2), heading: (1, 0), action: None, reward: 1.24413439196
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.2441343919560643, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.24)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('red', 'right', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (1, 2), heading: (1, 0), action: forward, reward: -9.01585825259
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'left', 'forward'), 'deadline': 15, 't': 5, 'action': 'forward', 'reward': -9.015858252588998, 'waypoint': 'forward'}
Agent previous state: ('red', 'right', 'left', 'forward')
Agent attempted driving forward through a red light. (rewarded -9.02)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'left', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'forward', 'left', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (2, 2), heading: (1, 0), action: forward, reward: 2.75540396882
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'left', 'forward'), 'deadline': 14, 't': 6, 'action': 'forward', 'reward': 2.7554039688191363, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 2.76)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
------maxQ=1.22378633989-----candidates_actions=['forward']
Environment.act() [POST]: location: (3, 2), heading: (1, 0), action: forward, reward: 2.65249003053
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 13, 't': 7, 'action': 'forward', 'reward': 2.652490030526212, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.65)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 3), heading: (0, 1), action: right, reward: 1.02563662623
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 12, 't': 8, 'action': 'right', 'reward': 1.0256366262306438, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.03)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'left')
------maxQ=0.721796103319-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 3), heading: (-1, 0), action: right, reward: 1.40147304154
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'left'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 1.4014730415409358, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 1.40)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'left', 'right')
------maxQ=1.06357418009-----candidates_actions=['forward']
Environment.act() [POST]: location: (1, 3), heading: (-1, 0), action: forward, reward: 1.57969520134
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'left', 'right'), 'deadline': 10, 't': 10, 'action': 'forward', 'reward': 1.5796952013431236, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'left', 'right')
Agent drove forward instead of right. (rewarded 1.58)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.16335735138-----candidates_actions=['right']
Environment.act() [POST]: location: (1, 2), heading: (0, -1), action: right, reward: 2.54150731531
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 9, 't': 11, 'action': 'right', 'reward': 2.541507315306113, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.54)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
------maxQ=0.56017336178-----candidates_actions=['left']
Environment.act() [POST]: location: (8, 2), heading: (-1, 0), action: left, reward: 1.57873198871
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 8, 't': 12, 'action': 'left', 'reward': 1.578731988709539, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded 1.58)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'right')
------maxQ=1.6408050998-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: right, reward: 0.994450821848
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'right'), 'deadline': 7, 't': 13, 'action': 'right', 'reward': 0.9944508218484314, 'waypoint': 'right'}
Agent previous state: ('red', 'left', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 0.99)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'forward', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right', 'left']
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: forward, reward: 1.54631361538
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'forward', 'right'), 'deadline': 6, 't': 14, 'action': 'forward', 'reward': 1.5463136153820507, 'waypoint': 'right'}
Agent previous state: ('green', 'left', 'forward', 'right')
Agent drove forward instead of right. (rewarded 1.55)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=0.468407879962-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 0.867301952921
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 5, 't': 15, 'action': None, 'reward': 0.8673019529207537, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 0.87)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'right')
------maxQ=0.468407879962-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 6), heading: (0, -1), action: None, reward: 0.440170097802
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'right'), 'deadline': 4, 't': 16, 'action': None, 'reward': 0.44017009780233796, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'left', 'right')
Agent properly idled at a red light. (rewarded 0.44)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'right')
------maxQ=0.56017336178-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 6), heading: (-1, 0), action: left, reward: -0.593231025926
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'right'), 'deadline': 3, 't': 17, 'action': 'left', 'reward': -0.5932310259263381, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'left', 'right')
Agent drove left instead of right. (rewarded -0.59)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
------maxQ=1.22378633989-----candidates_actions=['forward']
Environment.act() [POST]: location: (6, 6), heading: (-1, 0), action: forward, reward: 0.429860767548
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 2, 't': 18, 'action': 'forward', 'reward': 0.42986076754814406, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 0.43)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.56821009757-----candidates_actions=['forward']
Environment.act() [POST]: location: (5, 6), heading: (-1, 0), action: forward, reward: 1.1325593792
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 1, 't': 19, 'action': 'forward', 'reward': 1.1325593792006352, 'waypoint': 'forward'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 1.13)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

/-------------------------
| Testing trial 4
\-------------------------

Environment.reset(): Trial set up with start = (3, 6), destination = (7, 4), deadline = 30

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.18919030384-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 6), heading: (-1, 0), action: right, reward: 2.87286883756
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 30, 't': 0, 'action': 'right', 'reward': 2.8728688375644564, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.87)
97% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.38095069303-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 6), heading: (-1, 0), action: None, reward: 1.20745154612
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 29, 't': 1, 'action': None, 'reward': 1.2074515461178976, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.21)
93% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.38095069303-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 6), heading: (-1, 0), action: None, reward: 2.48742380686
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 28, 't': 2, 'action': None, 'reward': 2.487423806856426, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 2.49)
90% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.38095069303-----candidates_actions=[None]
Environment.act() [POST]: location: (2, 6), heading: (-1, 0), action: None, reward: 2.97117350371
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 27, 't': 3, 'action': None, 'reward': 2.971173503708279, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 2.97)
87% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.56821009757-----candidates_actions=['forward']
Environment.act() [POST]: location: (1, 6), heading: (-1, 0), action: forward, reward: 2.43169589899
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 26, 't': 4, 'action': 'forward', 'reward': 2.431695898989111, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 2.43)
83% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.44291875607-----candidates_actions=[None]
Environment.act() [POST]: location: (1, 6), heading: (-1, 0), action: None, reward: 1.37434086087
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 25, 't': 5, 'action': None, 'reward': 1.3743408608675152, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 1.37)
80% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'forward')
------maxQ=0.826569518565-----candidates_actions=['forward']
Environment.act() [POST]: location: (8, 6), heading: (-1, 0), action: forward, reward: 2.85118193147
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'forward'), 'deadline': 24, 't': 6, 'action': 'forward', 'reward': 2.851181931468406, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 2.85)
77% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.98031408582-----candidates_actions=['forward']
Environment.act() [POST]: location: (7, 6), heading: (-1, 0), action: forward, reward: 2.8776106307
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 23, 't': 7, 'action': 'forward', 'reward': 2.877610630696542, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.88)
73% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.18919030384-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 5), heading: (0, -1), action: right, reward: 1.76615984519
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 22, 't': 8, 'action': 'right', 'reward': 1.7661598451894513, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.77)
70% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.56821009757-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (7, 4), heading: (0, -1), action: forward, reward: 1.29571279506
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 21, 't': 9, 'action': 'forward', 'reward': 1.2957127950619312, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 1.30)
67% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 5
\-------------------------

Environment.reset(): Trial set up with start = (6, 4), destination = (7, 7), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 4), heading: (1, 0), action: left, reward: 2.0675272329
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 20, 't': 0, 'action': 'left', 'reward': 2.067527232896513, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.07)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (7, 4), heading: (1, 0), action: None, reward: 1.53757611906
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 19, 't': 1, 'action': None, 'reward': 1.5375761190610397, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.54)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'left')
------maxQ=0.721796103319-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 5), heading: (0, 1), action: right, reward: 0.184873776707
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'left'), 'deadline': 18, 't': 2, 'action': 'right', 'reward': 0.18487377670717542, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.18)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=1.17151124847-----candidates_actions=['right']
Environment.act() [POST]: location: (6, 5), heading: (-1, 0), action: right, reward: 1.49387685998
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 17, 't': 3, 'action': 'right', 'reward': 1.493876859979641, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.49)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act() [POST]: location: (6, 6), heading: (0, 1), action: left, reward: 2.05545945947
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 16, 't': 4, 'action': 'left', 'reward': 2.055459459470529, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.06)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (6, 6), heading: (0, 1), action: None, reward: 2.05623876231
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 15, 't': 5, 'action': None, 'reward': 2.056238762312485, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.06)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (6, 6), heading: (0, 1), action: None, reward: 1.20212201531
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 14, 't': 6, 'action': None, 'reward': 1.2021220153136636, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.20)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 6), heading: (1, 0), action: left, reward: 2.73004762667
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 13, 't': 7, 'action': 'left', 'reward': 2.730047626665204, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.73)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'right')
------maxQ=1.74098577615-----candidates_actions=['right']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (7, 7), heading: (0, 1), action: right, reward: 2.48990379984
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'right'), 'deadline': 12, 't': 8, 'action': 'right', 'reward': 2.4899037998357443, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'right', 'right')
Agent followed the waypoint right. (rewarded 2.49)
55% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 6
\-------------------------

Environment.reset(): Trial set up with start = (4, 7), destination = (7, 3), deadline = 25

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'right', 'notraffic', 'forward')
-- CreateQ self learning, not has key --> self.Q[('green', 'right', 'notraffic', 'forward')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (5, 7), heading: (1, 0), action: forward, reward: 2.61945953535
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'right'}, 'violation': 0, 'light': 'green', 'state': ('green', 'right', 'notraffic', 'forward'), 'deadline': 25, 't': 0, 'action': 'forward', 'reward': 2.6194595353498125, 'waypoint': 'forward'}
Agent previous state: ('green', 'right', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.62)
96% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.38095069303-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 7), heading: (1, 0), action: None, reward: 2.5025042853
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 24, 't': 1, 'action': None, 'reward': 2.502504285300822, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 2.50)
92% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'forward')
------maxQ=1.38095069303-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 7), heading: (1, 0), action: None, reward: 1.38691673677
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'forward'), 'deadline': 23, 't': 2, 'action': None, 'reward': 1.3869167367684219, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'left', 'forward')
Agent properly idled at a red light. (rewarded 1.39)
88% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'left', 'forward')
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (5, 7), heading: (1, 0), action: forward, reward: -9.8028270829
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': 'right'}, 'violation': 2, 'light': 'red', 'state': ('red', 'right', 'left', 'forward'), 'deadline': 22, 't': 3, 'action': 'forward', 'reward': -9.802827082903981, 'waypoint': 'forward'}
Agent previous state: ('red', 'right', 'left', 'forward')
Agent attempted driving forward through a red light. (rewarded -9.80)
84% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'forward')
------maxQ=1.56821009757-----candidates_actions=['forward']
Environment.act() [POST]: location: (6, 7), heading: (1, 0), action: forward, reward: 2.61719297238
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'forward'), 'deadline': 21, 't': 4, 'action': 'forward', 'reward': 2.6171929723821474, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'left', 'forward')
Agent followed the waypoint forward. (rewarded 2.62)
80% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (6, 2), heading: (0, 1), action: right, reward: 1.84574079248
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 20, 't': 5, 'action': 'right', 'reward': 1.8457407924776508, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.85)
76% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.783988712504-----candidates_actions=['right']
Environment.act() [POST]: location: (5, 2), heading: (-1, 0), action: right, reward: 1.5709744685
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 19, 't': 6, 'action': 'right', 'reward': 1.5709744685006646, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.57)
72% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (-1, 0), action: None, reward: 1.40322408063
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 18, 't': 7, 'action': None, 'reward': 1.4032240806342875, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.40)
68% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (-1, 0), action: None, reward: 2.79691392017
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 17, 't': 8, 'action': None, 'reward': 2.79691392017065, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.80)
64% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (-1, 0), action: None, reward: 1.5164450283
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 16, 't': 9, 'action': None, 'reward': 1.5164450282966022, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.52)
60% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (-1, 0), action: None, reward: 2.75520071374
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 15, 't': 10, 'action': None, 'reward': 2.755200713735315, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.76)
56% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (5, 3), heading: (0, 1), action: left, reward: 2.77870562512
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 14, 't': 11, 'action': 'left', 'reward': 2.778705625119266, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.78)
52% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.83707969044-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 3), heading: (0, 1), action: None, reward: 2.46656883269
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 13, 't': 12, 'action': None, 'reward': 2.4665688326919057, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 2.47)
48% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.783988712504-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 3), heading: (-1, 0), action: right, reward: 1.72276761662
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 12, 't': 13, 'action': 'right', 'reward': 1.7227676166239865, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.72)
44% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'right')
------maxQ=1.26098791912-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 2), heading: (0, -1), action: right, reward: 1.06378621698
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'right'), 'deadline': 11, 't': 14, 'action': 'right', 'reward': 1.0637862169805594, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 1.06)
40% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'right')
------maxQ=1.1380086098-----candidates_actions=['right']
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: right, reward: 2.53815480987
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'right'), 'deadline': 10, 't': 15, 'action': 'right', 'reward': 2.538154809871198, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.54)
36% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'forward')
------maxQ=1.40218445032-----candidates_actions=[None]
Environment.act() [POST]: location: (5, 2), heading: (1, 0), action: None, reward: 1.54298459912
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'forward'), 'deadline': 9, 't': 16, 'action': None, 'reward': 1.5429845991171007, 'waypoint': 'forward'}
Agent previous state: ('red', 'forward', 'notraffic', 'forward')
Agent properly idled at a red light. (rewarded 1.54)
32% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (5, 3), heading: (0, 1), action: right, reward: 0.920260976651
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 8, 't': 17, 'action': 'right', 'reward': 0.9202609766514556, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.92)
28% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=1.61925045691-----candidates_actions=['left']
Environment.act() [POST]: location: (6, 3), heading: (1, 0), action: left, reward: 1.03867712512
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 7, 't': 18, 'action': 'left', 'reward': 1.0386771251205864, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.04)
24% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'forward')
------maxQ=1.01244769934-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (7, 3), heading: (1, 0), action: forward, reward: 1.05060609711
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'forward'), 'deadline': 6, 't': 19, 'action': 'forward', 'reward': 1.0506060971133024, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 1.05)
20% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 7
\-------------------------

Environment.reset(): Trial set up with start = (3, 6), destination = (7, 7), deadline = 25

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'right')
-- CreateQ self learning, not has key --> self.Q[('red', 'notraffic', 'right', 'right')]={'forward': 0.0, 'right': 0.0, None: 0.0, 'left': 0.0}
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (2, 6), heading: (-1, 0), action: right, reward: 1.39813178663
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'right'), 'deadline': 25, 't': 0, 'action': 'right', 'reward': 1.3981317866311225, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'right', 'right')
Agent followed the waypoint right. (rewarded 1.40)
96% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=1.17151124847-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 5), heading: (0, -1), action: right, reward: 0.178783229075
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 24, 't': 1, 'action': 'right', 'reward': 0.17878322907472888, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.18)
92% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'right', 'notraffic', 'left')
------maxQ=0.481358460167-----candidates_actions=['left']
Environment.act() [POST]: location: (1, 5), heading: (-1, 0), action: left, reward: 2.78246909
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'right'}, 'violation': 0, 'light': 'green', 'state': ('green', 'right', 'notraffic', 'left'), 'deadline': 23, 't': 2, 'action': 'left', 'reward': 2.782469090004646, 'waypoint': 'left'}
Agent previous state: ('green', 'right', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.78)
88% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'right', 'forward')
------maxQ=0.811035188015-----candidates_actions=['forward']
Environment.act() [POST]: location: (8, 5), heading: (-1, 0), action: forward, reward: 1.20418794791
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'right', 'forward'), 'deadline': 22, 't': 3, 'action': 'forward', 'reward': 1.204187947905522, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'right', 'forward')
Agent followed the waypoint forward. (rewarded 1.20)
84% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 4), heading: (0, -1), action: right, reward: 0.307235648599
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 21, 't': 4, 'action': 'right', 'reward': 0.30723564859920727, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.31)
80% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 4), heading: (0, -1), action: None, reward: 2.18986583238
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 20, 't': 5, 'action': None, 'reward': 2.1898658323843043, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 2.19)
76% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 4), heading: (-1, 0), action: left, reward: 1.16616594321
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': 'right', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 19, 't': 6, 'action': 'left', 'reward': 1.1661659432139928, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 1.17)
72% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'right')
------maxQ=1.80369333586-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 3), heading: (0, -1), action: right, reward: 2.45105874121
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'right'), 'deadline': 18, 't': 7, 'action': 'right', 'reward': 2.451058741206034, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.45)
68% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'forward')
------maxQ=1.01244769934-----candidates_actions=['forward']
Environment.act() [POST]: location: (7, 2), heading: (0, -1), action: forward, reward: 2.3159949558
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'forward'), 'deadline': 17, 't': 8, 'action': 'forward', 'reward': 2.315994955802684, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 2.32)
64% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.98031408582-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (7, 7), heading: (0, -1), action: forward, reward: 0.876993868375
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 16, 't': 9, 'action': 'forward', 'reward': 0.8769938683747787, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 0.88)
60% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 8
\-------------------------

Environment.reset(): Trial set up with start = (8, 2), destination = (6, 6), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: right, reward: 1.92028193385
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 1.920281933854793, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.92)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'right', 'forward', 'left')
------maxQ=1.28238177855-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: None, reward: 1.14106621255
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'forward', 'left': 'right'}, 'violation': 0, 'light': 'red', 'state': ('red', 'right', 'forward', 'left'), 'deadline': 19, 't': 1, 'action': None, 'reward': 1.1410662125537543, 'waypoint': 'left'}
Agent previous state: ('red', 'right', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.14)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.83707969044-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: None, reward: 0.977811300826
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 18, 't': 2, 'action': None, 'reward': 0.9778113008258393, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 0.98)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.83707969044-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: None, reward: 2.42395960526
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 17, 't': 3, 'action': None, 'reward': 2.4239596052623673, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 2.42)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'left')
------maxQ=1.83707969044-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: None, reward: 1.99479378919
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'left'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.9947937891872185, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'forward', 'left')
Agent properly idled at a red light. (rewarded 1.99)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'left', 'left')
------maxQ=2.06900923741-----candidates_actions=[None]
Environment.act() [POST]: location: (8, 7), heading: (0, -1), action: None, reward: 1.28787384213
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'left', 'left'), 'deadline': 15, 't': 5, 'action': None, 'reward': 1.2878738421341953, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'left', 'left')
Agent properly idled at a red light. (rewarded 1.29)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 7), heading: (-1, 0), action: left, reward: 1.27824584611
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 14, 't': 6, 'action': 'left', 'reward': 1.278245846108635, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 1.28)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.98031408582-----candidates_actions=['forward']
Environment.act() [POST]: location: (6, 7), heading: (-1, 0), action: forward, reward: 2.85513920069
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 13, 't': 7, 'action': 'forward', 'reward': 2.855139200688109, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 2.86)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (6, 6), heading: (0, -1), action: right, reward: 1.01581663947
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'right'), 'deadline': 12, 't': 8, 'action': 'right', 'reward': 1.0158166394717825, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'right', 'right')
Agent followed the waypoint right. (rewarded 1.02)
55% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 9
\-------------------------

Environment.reset(): Trial set up with start = (8, 5), destination = (6, 7), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=1.61925045691-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 5), heading: (-1, 0), action: left, reward: 2.06108377729
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 20, 't': 0, 'action': 'left', 'reward': 2.0610837772940167, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.06)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 4), heading: (0, -1), action: right, reward: 0.724209586531
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 19, 't': 1, 'action': 'right', 'reward': 0.7242095865308188, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 0.72)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=1.61925045691-----candidates_actions=['left']
Environment.act() [POST]: location: (6, 4), heading: (-1, 0), action: left, reward: 2.46517142233
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 18, 't': 2, 'action': 'left', 'reward': 2.4651714223260615, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 2.47)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'right')
------maxQ=1.81758983458-----candidates_actions=['right']
Environment.act() [POST]: location: (6, 3), heading: (0, -1), action: right, reward: 2.32779931622
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'right'), 'deadline': 17, 't': 3, 'action': 'right', 'reward': 2.3277993162216224, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.33)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'forward', 'forward')
------maxQ=1.44291875607-----candidates_actions=[None]
Environment.act() [POST]: location: (6, 3), heading: (0, -1), action: None, reward: 0.979726676081
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'forward', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'forward', 'forward'), 'deadline': 16, 't': 4, 'action': None, 'reward': 0.9797266760809384, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'forward', 'forward')
Agent properly idled at a red light. (rewarded 0.98)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'forward')
------maxQ=0.826569518565-----candidates_actions=['forward']
Environment.act() [POST]: location: (6, 2), heading: (0, -1), action: forward, reward: 2.89334879303
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': 'forward', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'forward'), 'deadline': 15, 't': 5, 'action': 'forward', 'reward': 2.893348793029743, 'waypoint': 'forward'}
Agent previous state: ('green', 'notraffic', 'forward', 'forward')
Agent followed the waypoint forward. (rewarded 2.89)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 2), heading: (1, 0), action: right, reward: 1.0113268427
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 14, 't': 6, 'action': 'right', 'reward': 1.0113268426954027, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.01)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'left')
------maxQ=1.61925045691-----candidates_actions=['left']
Environment.act() [POST]: location: (7, 7), heading: (0, -1), action: left, reward: 1.97240905271
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'left'), 'deadline': 13, 't': 7, 'action': 'left', 'reward': 1.9724090527067761, 'waypoint': 'left'}
Agent previous state: ('green', 'forward', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.97)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'left')
------maxQ=0.721796103319-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 7), heading: (1, 0), action: right, reward: 0.256748090715
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'left'), 'deadline': 12, 't': 8, 'action': 'right', 'reward': 0.2567480907150371, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.26)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.18919030384-----candidates_actions=['right']
Environment.act() [POST]: location: (8, 2), heading: (0, 1), action: right, reward: 1.32319746367
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': 1.3231974636711823, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.32)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'right')
------maxQ=2.18919030384-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 2), heading: (-1, 0), action: right, reward: 1.37144969936
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'right'), 'deadline': 10, 't': 10, 'action': 'right', 'reward': 1.3714496993568364, 'waypoint': 'right'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.37)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (7, 7), heading: (0, -1), action: right, reward: 1.43033613907
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 9, 't': 11, 'action': 'right', 'reward': 1.4303361390693445, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.43)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (7, 7), heading: (0, -1), action: None, reward: 1.70936445771
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 8, 't': 12, 'action': None, 'reward': 1.7093644577125553, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.71)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (6, 7), heading: (-1, 0), action: left, reward: 1.56935581338
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 7, 't': 13, 'action': 'left', 'reward': 1.5693558133767698, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.57)
30% of time remaining to reach destination.

Trial Completed!
Agent reached the destination.

/-------------------------
| Testing trial 10
\-------------------------

Environment.reset(): Trial set up with start = (1, 4), destination = (4, 3), deadline = 20

/-------------------
| Step 0 Results
\-------------------

Environment.step(): t = 0
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.16335735138-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 4), heading: (1, 0), action: right, reward: 2.09668467106
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 20, 't': 0, 'action': 'right', 'reward': 2.0966846710591547, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 2.10)
95% of time remaining to reach destination.

/-------------------
| Step 1 Results
\-------------------

Environment.step(): t = 1
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'left', 'notraffic', 'forward')
------maxQ=1.22378633989-----candidates_actions=['forward']
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: forward, reward: 1.29213930309
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'left'}, 'violation': 0, 'light': 'green', 'state': ('green', 'left', 'notraffic', 'forward'), 'deadline': 19, 't': 1, 'action': 'forward', 'reward': 1.29213930308798, 'waypoint': 'forward'}
Agent previous state: ('green', 'left', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 1.29)
90% of time remaining to reach destination.

/-------------------
| Step 2 Results
\-------------------

Environment.step(): t = 2
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=1.17151124847-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: right, reward: 1.45467734218
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 18, 't': 2, 'action': 'right', 'reward': 1.4546773421772903, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.45)
85% of time remaining to reach destination.

/-------------------
| Step 3 Results
\-------------------

Environment.step(): t = 3
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: None, reward: 2.48596898942
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 17, 't': 3, 'action': None, 'reward': 2.485968989420016, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 2.49)
80% of time remaining to reach destination.

/-------------------
| Step 4 Results
\-------------------

Environment.step(): t = 4
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: None, reward: 1.82682818832
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 16, 't': 4, 'action': None, 'reward': 1.8268281883159665, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.83)
75% of time remaining to reach destination.

/-------------------
| Step 5 Results
\-------------------

Environment.step(): t = 5
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'forward', 'left')
------maxQ=0.783988712504-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 5), heading: (-1, 0), action: right, reward: 1.1535701573
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'forward', 'left'), 'deadline': 15, 't': 5, 'action': 'right', 'reward': 1.1535701573009804, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'forward', 'left')
Agent drove right instead of left. (rewarded 1.15)
70% of time remaining to reach destination.

/-------------------
| Step 6 Results
\-------------------

Environment.step(): t = 6
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'right', 'right')
------maxQ=0.0-----candidates_actions=['forward', 'right', None, 'left']
Environment.act() [POST]: location: (2, 5), heading: (-1, 0), action: None, reward: 1.7100336911
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': 'right', 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'right', 'right'), 'deadline': 14, 't': 6, 'action': None, 'reward': 1.710033691102711, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'right', 'right')
Agent properly idled at a red light. (rewarded 1.71)
65% of time remaining to reach destination.

/-------------------
| Step 7 Results
\-------------------

Environment.step(): t = 7
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'forward', 'right')
------maxQ=1.1380086098-----candidates_actions=['right']
Environment.act() [POST]: location: (2, 4), heading: (0, -1), action: right, reward: 2.48617487826
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'forward', 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'forward', 'right'), 'deadline': 13, 't': 7, 'action': 'right', 'reward': 2.4861748782636433, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'forward', 'right')
Agent followed the waypoint right. (rewarded 2.49)
60% of time remaining to reach destination.

/-------------------
| Step 8 Results
\-------------------

Environment.step(): t = 8
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'right')
------maxQ=1.16335735138-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 4), heading: (1, 0), action: right, reward: 1.20211272996
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'right'), 'deadline': 12, 't': 8, 'action': 'right', 'reward': 1.2021127299618346, 'waypoint': 'right'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 1.20)
55% of time remaining to reach destination.

/-------------------
| Step 9 Results
\-------------------

Environment.step(): t = 9
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'forward')
------maxQ=1.17151124847-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 5), heading: (0, 1), action: right, reward: -0.179674918222
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'forward', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'forward'), 'deadline': 11, 't': 9, 'action': 'right', 'reward': -0.17967491822188308, 'waypoint': 'forward'}
Agent previous state: ('green', 'forward', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded -0.18)
50% of time remaining to reach destination.

/-------------------
| Step 10 Results
\-------------------

Environment.step(): t = 10
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: left, reward: 1.28701599957
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 10, 't': 10, 'action': 'left', 'reward': 1.2870159995658665, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 1.29)
45% of time remaining to reach destination.

/-------------------
| Step 11 Results
\-------------------

Environment.step(): t = 11
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
------maxQ=2.25745502364-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: None, reward: 0.959223724396
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 9, 't': 11, 'action': None, 'reward': 0.9592237243961665, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 0.96)
40% of time remaining to reach destination.

/-------------------
| Step 12 Results
\-------------------

Environment.step(): t = 12
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'forward', 'notraffic', 'left')
------maxQ=2.25745502364-----candidates_actions=[None]
Environment.act() [POST]: location: (4, 5), heading: (1, 0), action: None, reward: 1.40526865116
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': 'forward'}, 'violation': 0, 'light': 'red', 'state': ('red', 'forward', 'notraffic', 'left'), 'deadline': 8, 't': 12, 'action': None, 'reward': 1.4052686511573063, 'waypoint': 'left'}
Agent previous state: ('red', 'forward', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.41)
35% of time remaining to reach destination.

/-------------------
| Step 13 Results
\-------------------

Environment.step(): t = 13
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'left', 'notraffic', 'left')
------maxQ=0.721796103319-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 6), heading: (0, 1), action: right, reward: 0.657840766137
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'right', 'left': 'left'}, 'violation': 0, 'light': 'red', 'state': ('red', 'left', 'notraffic', 'left'), 'deadline': 7, 't': 13, 'action': 'right', 'reward': 0.6578407661368714, 'waypoint': 'left'}
Agent previous state: ('red', 'left', 'notraffic', 'left')
Agent drove right instead of left. (rewarded 0.66)
30% of time remaining to reach destination.

/-------------------
| Step 14 Results
\-------------------

Environment.step(): t = 14
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'forward')
------maxQ=0.920987240137-----candidates_actions=['right']
Environment.act() [POST]: location: (3, 6), heading: (-1, 0), action: right, reward: 1.12497054535
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'forward'), 'deadline': 6, 't': 14, 'action': 'right', 'reward': 1.1249705453528125, 'waypoint': 'forward'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'forward')
Agent drove right instead of forward. (rewarded 1.12)
25% of time remaining to reach destination.

/-------------------
| Step 15 Results
\-------------------

Environment.step(): t = 15
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('red', 'notraffic', 'notraffic', 'left')
------maxQ=1.71024040731-----candidates_actions=[None]
Environment.act() [POST]: location: (3, 6), heading: (-1, 0), action: None, reward: 1.9654663612
Environment.act(): Step data: {'inputs': {'light': 'red', 'oncoming': None, 'right': 'left', 'left': None}, 'violation': 0, 'light': 'red', 'state': ('red', 'notraffic', 'notraffic', 'left'), 'deadline': 5, 't': 15, 'action': None, 'reward': 1.9654663611962333, 'waypoint': 'left'}
Agent previous state: ('red', 'notraffic', 'notraffic', 'left')
Agent properly idled at a red light. (rewarded 1.97)
20% of time remaining to reach destination.

/-------------------
| Step 16 Results
\-------------------

Environment.step(): t = 16
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'left')
------maxQ=1.23240077329-----candidates_actions=['left']
Environment.act() [POST]: location: (3, 7), heading: (0, 1), action: left, reward: 0.497797511542
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'left'), 'deadline': 4, 't': 16, 'action': 'left', 'reward': 0.49779751154177165, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'notraffic', 'left')
Agent followed the waypoint left. (rewarded 0.50)
15% of time remaining to reach destination.

/-------------------
| Step 17 Results
\-------------------

Environment.step(): t = 17
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'left', 'left')
------maxQ=1.98173801407-----candidates_actions=['left']
Environment.act() [POST]: location: (4, 7), heading: (1, 0), action: left, reward: 2.0613631405
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': 'left', 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'left', 'left'), 'deadline': 3, 't': 17, 'action': 'left', 'reward': 2.061363140499143, 'waypoint': 'left'}
Agent previous state: ('green', 'notraffic', 'left', 'left')
Agent followed the waypoint left. (rewarded 2.06)
10% of time remaining to reach destination.

/-------------------
| Step 18 Results
\-------------------

Environment.step(): t = 18
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'forward', 'notraffic', 'right')
------maxQ=1.81758983458-----candidates_actions=['right']
Environment.act() [POST]: location: (4, 2), heading: (0, 1), action: right, reward: 0.664572889625
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': 'left', 'left': 'forward'}, 'violation': 0, 'light': 'green', 'state': ('green', 'forward', 'notraffic', 'right'), 'deadline': 2, 't': 18, 'action': 'right', 'reward': 0.6645728896247112, 'waypoint': 'right'}
Agent previous state: ('green', 'forward', 'notraffic', 'right')
Agent followed the waypoint right. (rewarded 0.66)
5% of time remaining to reach destination.

/-------------------
| Step 19 Results
\-------------------

Environment.step(): t = 19
-- build_state --> state("light-state", "left-traffic",  "oncoming-traffic","next-waypoint")= ('green', 'notraffic', 'notraffic', 'forward')
------maxQ=1.98031408582-----candidates_actions=['forward']
Environment.act(): Primary agent has reached destination!
Environment.act() [POST]: location: (4, 3), heading: (0, 1), action: forward, reward: 0.126198964883
Environment.act(): Step data: {'inputs': {'light': 'green', 'oncoming': None, 'right': None, 'left': None}, 'violation': 0, 'light': 'green', 'state': ('green', 'notraffic', 'notraffic', 'forward'), 'deadline': 1, 't': 19, 'action': 'forward', 'reward': 0.12619896488296178, 'waypoint': 'forward'}
Environment.step(): Primary agent ran out of time! Trial aborted.
Agent previous state: ('green', 'notraffic', 'notraffic', 'forward')
Agent followed the waypoint forward. (rewarded 0.13)
0% of time remaining to reach destination.

Trial Aborted!
Agent did not reach the destination.

Simulation ended. . . 
> > > - - - Run End - - - > > > 
